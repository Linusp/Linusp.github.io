<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title>Linusp's Blog</title>
  <link href="http://linusp.github.io"/>
  <link type= "application/atom+xml" href="http://linusp.github.io/" rel="self"/>
  <updated>2014-02-22T17:32:28-05:00</updated>
  <id>http://linusp.github.io</id>
  <author>
    <name>Linusp</name>
    <email>linusp1024@gmail.com</email>
  </author>

  
  <entry>
    <title>在Org-mode中显示特殊字符</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/02/22/display-special-character-in-org-mode.html"/>
    <id>http://linusp.github.io/2014/02/22/display-special-character-in-org-mode</id>
    <published>2014-02-22T00:00:00-05:00</published>
    <updated>2014-02-22T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;在Org-mode中编写数学公式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在Org-mode中可以编写符合Latex语法的数学符号及公式，并且在发布成网页时以易读的形式展示。
&lt;/p&gt;

&lt;p&gt;
比如下面这段语句：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;$$e^{i\pi} + 1 = 0$$
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
会显示成：
$$e^{i\pi} + 1 = 0$$
&lt;/p&gt;

&lt;p&gt;
要启用这个功能，需要在发布成网页时在模板头部中包含：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;src&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://orgmode.org/mathjax/MathJax.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;
  &lt;span style=&quot;color: #e81122;&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;--&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[/*&amp;gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;    MathJax.Hub.Config({&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        // Only one of the two following lines, depending on user settings&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        // First allows browser-native MathML display, second forces HTML/CSS&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        //  config: [&quot;MMLorHTML.js&quot;], jax: [&quot;input/TeX&quot;],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            jax: [&quot;input/TeX&quot;, &quot;output/HTML-CSS&quot;],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        extensions: [&quot;tex2jax.js&quot;,&quot;TeX/AMSmath.js&quot;,&quot;TeX/AMSsymbols.js&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;                     &quot;TeX/noUndefined.js&quot;],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        tex2jax: {&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            inlineMath: [ [&quot;\\(&quot;,&quot;\\)&quot;] ],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            displayMath: [ ['$$','$$'], [&quot;\\[&quot;,&quot;\\]&quot;], [&quot;\\begin{displaymath}&quot;,&quot;\\end{displaymath}&quot;] ],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            skipTags: [&quot;script&quot;,&quot;noscript&quot;,&quot;style&quot;,&quot;textarea&quot;,&quot;pre&quot;,&quot;code&quot;],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            ignoreClass: &quot;tex2jax_ignore&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            processEscapes: false,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            processEnvironments: true,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;            preview: &quot;TeX&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        },&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        showProcessingMessages: true,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        displayAlign: &quot;center&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        displayIndent: &quot;2em&quot;,&lt;/span&gt;

&lt;span style=&quot;color: #e81122;&quot;&gt;        &quot;HTML-CSS&quot;: {&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             scale: 100,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             availableFonts: [&quot;STIX&quot;,&quot;TeX&quot;],&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             preferredFont: &quot;TeX&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             webFont: &quot;TeX&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             imageFont: &quot;TeX&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             showMathMenu: true,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        },&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        MMLorHTML: {&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             prefer: {&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;                 MSIE:    &quot;MML&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;                 Firefox: &quot;MML&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;                 Opera:   &quot;HTML&quot;,&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;                 other:   &quot;HTML&quot;&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;             }&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;        }&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;    });&lt;/span&gt;
&lt;span style=&quot;color: #e81122;&quot;&gt;/*]]&amp;gt;*///&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在将单个org-mode文档导出成网页时，模板中时默认有此内容的，可以不用进行特别的设置。不过在将一个目录作为项目发布成网页时，出于简洁的目的，可能会有如下设置：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-publish-project-alist
      '(
        (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;blog-org&quot;&lt;/span&gt;
         ...
         &lt;span style=&quot;color: #31d3c4;&quot;&gt;:html-head-include-scripts&lt;/span&gt; nil
         ...)
        ...))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这条语句会使项目在发布时去除默认模板中包含的一些js片段，这是需要注意的地方。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;所见即所得:在org-mode中即时显示特殊字符、数学公式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
其实在org-mode文档中也能在编辑好特殊字符、数学符号及公式后即时地显示，实现真正的“所见即所得”。
&lt;/p&gt;

&lt;p&gt;
临时启用这个特性，只要在编辑org文档时执行：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
C-c C-x \
&lt;/pre&gt;
&lt;p&gt;
这个快捷键会调用命令：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
org-toggle-pretty-entities
&lt;/pre&gt;

&lt;p&gt;
效果如下：
&lt;img src=&quot;../../../assets/img/org-pretty-entities.gif&quot; alt=&quot;org-pretty-entities.gif&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
不过效果并不是非常好，和Texmacs还有区别。对于单个的特殊字符如希腊字母，效果时可以的，但对于一些复杂的数学公式，比如
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;$$J(\theta) = \frac{1}{2m}\sum_{i=1}^{m}(\theta^{T}X_{i} - Y_{i})^2$$
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
理想的显示效果应该时：
$$J(\theta) = \frac{1}{2m}\sum_{i=1}^{m}(\theta^{T}X_{i} - Y_{i})^2$$
&lt;/p&gt;

&lt;p&gt;
但它的实际显示效果却是：
&lt;img src=&quot;../../../assets/img/actually-pretty-entities.png&quot; alt=&quot;actually-pretty-entities.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
可以看出org-mode的这个功能中对特殊字符的解析和Latex的语法并不一致，至于是否存在解决办法，这个就有待以后讨论吧。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>(2014年1月)月底小结</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/31/january-of-2014.html"/>
    <id>http://linusp.github.io/2014/01/31/january-of-2014</id>
    <published>2014-01-31T00:00:00-05:00</published>
    <updated>2014-01-31T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
2014年的第一个31天就这么过去了，而这个月的最后一天，刚好又是农历新年的第一天。
&lt;/p&gt;

&lt;p&gt;
这31天里，《全球通史》我一页也没有翻过，日记多日未写，偶尔写写代码。总而言之，是很没有干劲的一个月。部分原因是临近过年家中事多，还有部分原因则是离家之日临近所带来的复杂心理状况吧。
&lt;/p&gt;

&lt;p&gt;
以下是本月所做的事情：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;解决改派及调档事宜
&lt;/li&gt;
&lt;li&gt;复习了部分算法和数据结构
&lt;/li&gt;
&lt;li&gt;读完了《TCP/IP Socket in C》，掌握了Socket编程的基础
&lt;/li&gt;
&lt;li&gt;(游戏)在MCBBS服务器上定居并拥有了足够生存的资源
&lt;/li&gt;
&lt;li&gt;和五位初中同学以及两位高中同学会面并交流
&lt;/li&gt;
&lt;li&gt;在大年初一和七位朋友通电话传递新年祝福并“闲谈”
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
因为想为后面找工作做准备，前半个月直接就把学了一半的机器学习公开课丢下了；后半个月则基本没做什么对将来独立生活有直接意义的事情。当然了，指责自己是没什么意义的。
&lt;/p&gt;

&lt;p&gt;
只能对自己说加油吧。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>排序算法——堆排序</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/12/heap-sort.html"/>
    <id>http://linusp.github.io/2014/01/12/heap-sort</id>
    <published>2014-01-12T00:00:00-05:00</published>
    <updated>2014-01-12T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;堆排序概述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
堆排序通过建立大顶堆(或小顶堆)来进行排序，要理解这个算法，首先要明白什么是 &lt;b&gt;大顶堆&lt;/b&gt; 或者 &lt;b&gt;小顶堆&lt;/b&gt; 。
&lt;/p&gt;

&lt;p&gt;
这里的堆是一种数据结构，它是一棵完全二叉树(除最后一层外，其他层都是满的)，且每个节点都具有同一种特性，那就是该节点的值大于子节点的值，或者节点的值小于子节点的值，前者被称为 &lt;b&gt;大顶堆&lt;/b&gt; ，后者被称为 &lt;b&gt;小顶堆&lt;/b&gt; 。大顶堆的根节点的值一定是整个堆中最大的，小顶堆的根节点的值一定是堆中最小的。利用这个特性，如果要对一个数组进行升序排序，那么可以按照以下步骤进行：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;将数组元素视为一个堆，建立大顶堆
&lt;/li&gt;
&lt;li&gt;将堆顶元素和堆尾元素交换，并出堆
&lt;/li&gt;
&lt;li&gt;对堆进行处理，维持大顶堆性质
&lt;/li&gt;
&lt;li&gt;重复2、3步(此时已出堆的元素不再处理)，直到堆中只有一个元素
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;堆排序实现&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
首先，要从逻辑上建立对堆的相关操作，在排序中并不需要建立一棵二叉树，而是将数组“视为”二叉树即可。对于二叉树而言，最起码的，应该有取得某个节点的父节点及子节点的功能。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;节点访问&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
用python实现如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;parent&lt;/span&gt;(heap, node):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; node &amp;gt; 0:
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; (node + 1) / 2
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;lchild&lt;/span&gt;(node):
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 2 * node + 1
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;rchild&lt;/span&gt;(node):
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 2 * node + 2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;建立大顶堆&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
建立大顶堆要从最后一个具有子节点的节点上开始操作，将当前节点作为一个大顶堆的堆顶，进行堆性质维持的处理。并逐步往前对该节点的兄弟节点、父节点进行同样的操作。
&lt;/p&gt;

&lt;p&gt;
首先需要实现一个堆性质维持处理函数，实现如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;heapify&lt;/span&gt;(heap, root, size):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;max_index&lt;/span&gt; = root
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;l&lt;/span&gt; = lchild(root)
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;r&lt;/span&gt; = rchild(root)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt;  l &amp;lt; size &lt;span style=&quot;color: #cf4a44;&quot;&gt;and&lt;/span&gt; heap[l] &amp;gt; heap[max_index]:
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;max_index&lt;/span&gt; = l
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;elif&lt;/span&gt; r &amp;lt; size &lt;span style=&quot;color: #cf4a44;&quot;&gt;and&lt;/span&gt; heap[r] &amp;gt; heap[max_index]:
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;max_index&lt;/span&gt; = r
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; root != max_index:
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;        heap[root], &lt;span style=&quot;color: #fefc58;&quot;&gt;heap&lt;/span&gt;[max_index] = heap[max_index], heap[root]
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;        heapify(heap, max_index)
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #bebebe;&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
用python实现如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;build_heap&lt;/span&gt;(heap):
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;size&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(heap)
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;last&lt;/span&gt; = size / 2 - 1
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; cur &lt;span style=&quot;color: #cf4a44;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;range&lt;/span&gt;(last, -1, -1):
&lt;span class=&quot;linenr&quot;&gt;5: &lt;/span&gt;        heapify(heap, cur, size)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;实现堆排序&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
根据&lt;a href=&quot;#sec-1&quot;&gt;堆排序概述&lt;/a&gt;中的内容，可以大致将堆排序描述如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;hsort&lt;/span&gt;(arr):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;size&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(arr)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;last&lt;/span&gt; = size - 1
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    build_heap(arr)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; size &amp;gt; 1:
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;        arr[0], &lt;span style=&quot;color: #fefc58;&quot;&gt;arr&lt;/span&gt;[last] = arr[last], arr[0]
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;last&lt;/span&gt; = last - 1
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;size&lt;/span&gt; = size - 1
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        heapify(arr, 0, size)
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #bebebe;&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
结合前面实现的parent、lchild、rchild、heapify、build_heap几个函数，就可以实现一个完整的堆排序算法了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;发散：TOP K问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
所谓的 &lt;b&gt;TOP K问题&lt;/b&gt; ，是指在大规模数据处理时常遇到的一类问题，要求在海量数据中找出最大的前K个数。这个问题可以通过建立小顶堆来解决——当然了，为了效率和资源的有效利用，这类问题通常还有整体方面的架构设计等工作需要做，远不是只建立一个小顶堆就能解决的，不过这些本文不作讨论。
&lt;/p&gt;

&lt;p&gt;
通过预先读入K个数据并建立小顶堆后，再逐个读入数据，将新元素和堆顶元素进行比较，如果新元素小于堆顶元素，就丢弃；如果新元素大于堆顶元素，则用新元素替代堆顶元素，并且重新调整堆使之保持小顶堆性质。
&lt;/p&gt;

&lt;p&gt;
这样处理后，总可以保证 &lt;b&gt;目前&lt;/b&gt; 读到的数据中最大的K个在小顶堆中。
&lt;/p&gt;

&lt;p&gt;
当我一开始接触到这个问题时，我幼稚地认为应该使用大顶堆，但实际上是错误的。用大顶堆可以保证堆顶元素是最大，但不能保证堆中元素是前K个最大的数。
&lt;/p&gt;

&lt;p&gt;
我误认为应该使用大顶堆的原因还有一个，那就是忽视了“海量数据”这个情境。
&lt;/p&gt;

&lt;p&gt;
对于小规模的TOP K问题，可以直接将数据进行排序，然后取出最大的K个数。但海量数据处理中，数据是不可能同时全部进入内存的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>排序算法——归并排序</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/11/merge-sort.html"/>
    <id>http://linusp.github.io/2014/01/11/merge-sort</id>
    <published>2014-01-11T00:00:00-05:00</published>
    <updated>2014-01-11T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;归并排序&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
归并排序也是一种使用分治法来实现的有效排序算法，它是现代计算机创始人John von Neumann于1945年发明的。
&lt;/p&gt;

&lt;p&gt;
归并排序在众多排序算法中既是稳定排序，又有不错的效率，同时，归并排序不仅可以用于内排序，还可以用于外排序。所以说归并排序是非常值得学习的。
&lt;/p&gt;

&lt;p&gt;
本文将对归并排序的思想进行阐释，并给出完整的实现，然后对外排序进行探讨。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;算法思想&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
归并排序的思路如下(以二路归并为例)：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;将数组划均分为两个子数组；
&lt;/li&gt;
&lt;li&gt;对两个字数组进行排序；
&lt;/li&gt;
&lt;li&gt;将排序好的两个字数组归并。
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
所谓 &lt;b&gt;N路归并&lt;/b&gt; 是指将数组均分为N个子数组，将字数组排序后再归并。因此二路归并是归并排序的最一般的情况。
&lt;/p&gt;

&lt;p&gt;
这里是二路归并排序的一个图示：
&lt;img src=&quot;../../../assets/img/merge-sort.png&quot; alt=&quot;merge-sort.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
二路归并排序用python描述如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;msort&lt;/span&gt;(array):
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(array)
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; length == 1:
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;span class=&quot;linenr&quot;&gt;5: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt;6: &lt;/span&gt;        mid = length / 2
&lt;span class=&quot;linenr&quot;&gt;7: &lt;/span&gt;        left = msort(array[0: mid])
&lt;span class=&quot;linenr&quot;&gt;8: &lt;/span&gt;        right = msort(array[mid: length])
&lt;span class=&quot;linenr&quot;&gt;9: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; merge(left, right)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当然，这里描述的是递归版本的算法，实际情况中有时候也会为了效率而使用循环而不是递归来实现归并排序。下面是使用循环的算法描述：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;msort&lt;/span&gt;(array):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(array)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;step&lt;/span&gt; = 1
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; step &amp;lt; length:
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; left &lt;span style=&quot;color: #cf4a44;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;range&lt;/span&gt;(0, length - step, 2 * step):
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; = merge(array[left:left + step],
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;                           array[left + step: &lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(left + 2 * step,
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;                                                  length)])
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;array&lt;/span&gt; = array[0:left] + result + array[&lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(left + 2 *
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;                                                       step, length)]
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;step&lt;/span&gt; = step * 2
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
msort中的归并部分(merge)的思想是：分别取出字数组中最小的元素，取它们中较小的放入原数组中，然后重复这个过程。《算法导论》中将这个过程类比为整理扑克牌的过程，非常形象。想象一下，桌面上有两堆扑克，它们都朝下扣着，并且按照牌面点数从小到大放置，我们要的是把这两堆扑克都拿到手里，并且按照从小到大的顺序排好序，这个时候要怎么做？
&lt;/p&gt;

&lt;p&gt;
归并的思想可以用python描述如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;merge&lt;/span&gt;(left, right):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;llen&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(left)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;lcur&lt;/span&gt; = 0
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;rlen&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(right)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;rcur&lt;/span&gt; = 0
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; = []
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; lcur &amp;lt; llen &lt;span style=&quot;color: #cf4a44;&quot;&gt;and&lt;/span&gt; rcur &amp;lt; rlen:
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;lone&lt;/span&gt; = left[lcur]
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;rone&lt;/span&gt; = right[rcur]
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        result.append(&lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(lone, rone))
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; lone &amp;lt; rone:
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;lcur&lt;/span&gt; += 1
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;rcur&lt;/span&gt; += 1
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; += left[lcur:]
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; += right[rcur:]
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; result
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;完整实现&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
下面是综合了非递归与递归版本的二路归并排序的完整实现，结果由org-babel对代码块求值得到。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;-*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;merge&lt;/span&gt;(left, right):
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;llen&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(left)
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;lcur&lt;/span&gt; = 0
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;rlen&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(right)
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;rcur&lt;/span&gt; = 0
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; = []
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; lcur &amp;lt; llen &lt;span style=&quot;color: #cf4a44;&quot;&gt;and&lt;/span&gt; rcur &amp;lt; rlen:
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;lone&lt;/span&gt; = left[lcur]
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;rone&lt;/span&gt; = right[rcur]
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;        result.append(&lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(lone, rone))
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; lone &amp;lt; rone:
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;lcur&lt;/span&gt; += 1
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;rcur&lt;/span&gt; += 1
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; += left[lcur:]
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;result&lt;/span&gt; += right[rcur:]
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; result
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;msort_rec&lt;/span&gt;(array):
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(array)
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; length == 1:
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;        mid = length / 2
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;        left = msort_rec(array[0: mid])
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;        right = msort_rec(array[mid: length])
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; merge(left, right)
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;msort_iter&lt;/span&gt;(array):
&lt;span class=&quot;linenr&quot;&gt;31: &lt;/span&gt;    length = &lt;span style=&quot;color: #31d3c4;&quot;&gt;len&lt;/span&gt;(array)
&lt;span class=&quot;linenr&quot;&gt;32: &lt;/span&gt;    step = 1
&lt;span class=&quot;linenr&quot;&gt;33: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; step &amp;lt; length:
&lt;span class=&quot;linenr&quot;&gt;34: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; left &lt;span style=&quot;color: #cf4a44;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;range&lt;/span&gt;(0, length - step, 2 * step):
&lt;span class=&quot;linenr&quot;&gt;35: &lt;/span&gt;            result = merge(array[left:left + step],
&lt;span class=&quot;linenr&quot;&gt;36: &lt;/span&gt;                           array[left + step: &lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(left + 2 * step,
&lt;span class=&quot;linenr&quot;&gt;37: &lt;/span&gt;                                                  length)])
&lt;span class=&quot;linenr&quot;&gt;38: &lt;/span&gt;            array = array[0:left] + result + array[&lt;span style=&quot;color: #31d3c4;&quot;&gt;min&lt;/span&gt;(left + 2 *
&lt;span class=&quot;linenr&quot;&gt;39: &lt;/span&gt;                                                       step, length):]
&lt;span class=&quot;linenr&quot;&gt;40: &lt;/span&gt;        step = step * 2
&lt;span class=&quot;linenr&quot;&gt;41: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;span class=&quot;linenr&quot;&gt;42: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;43: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;__name__&lt;/span&gt; == &lt;span style=&quot;color: #25ef29;&quot;&gt;'__main__'&lt;/span&gt;:
&lt;span class=&quot;linenr&quot;&gt;44: &lt;/span&gt;    L = [1, 4, 2, 6, 3, 5, 8, 7]
&lt;span class=&quot;linenr&quot;&gt;45: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#25490;&amp;#24207;&amp;#21069;: %r&quot;&lt;/span&gt; %(L)
&lt;span class=&quot;linenr&quot;&gt;46: &lt;/span&gt;    R = msort_rec(L)
&lt;span class=&quot;linenr&quot;&gt;47: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#25490;&amp;#24207;&amp;#21518;(&amp;#36882;&amp;#24402;): %r&quot;&lt;/span&gt; %(R)
&lt;span class=&quot;linenr&quot;&gt;48: &lt;/span&gt;    I = msort_iter(L)
&lt;span class=&quot;linenr&quot;&gt;49: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#25490;&amp;#24207;&amp;#21518;(&amp;#38750;&amp;#36882;&amp;#24402;): %r&quot;&lt;/span&gt; %(I)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
结果
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
排序前: [1, 4, 2, 6, 3, 5, 8, 7]
排序后(递归): [1, 2, 3, 4, 5, 6, 7, 8]
排序后(非递归): [1, 2, 3, 4, 5, 6, 7, 8]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;发散：外排序应用&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
归并排序的思想可以用于外排序。外排序是相对内排序而言的。在常规的小规模排序过程中，都是直接在内存中对数据进行排序处理的，而对于数据量极大的排序问题，这种方式是不现实的。这个时候就要通过外排序来进行，先将数据划分成多个规模能在内存中处理的子集，对各个子集排序后存放在临时的磁盘文件上，然后再将这些子集归并到输出文件中。这个过程要使用到多路归并，如下图所示：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/external-sort.png&quot; alt=&quot;external-sort.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
注：该图来自 &lt;a href=&quot;#sec-5&quot;&gt;References&lt;/a&gt; 中第一篇文章。
&lt;/p&gt;

&lt;p&gt;
那么来实现一下吧。
&lt;/p&gt;

&lt;p&gt;
首先要创建一个大文件，往里面写入大量的数据，该函数实现如下(因为python不方便读取单个数字，下面的东西都是用C写的):
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;rand_file&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;file&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;num&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;i&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;now&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;FILE&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: #cf4a44;&quot;&gt;fopen&lt;/span&gt;(file, &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;w&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (f == &lt;span style=&quot;color: #bebebe;&quot;&gt;NULL&lt;/span&gt;) {
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;perror&lt;/span&gt;(&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;fopen&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; i &amp;lt; num; ++i) {
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;srand&lt;/span&gt;((&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt;)&lt;span style=&quot;color: #cf4a44;&quot;&gt;time&lt;/span&gt;(0));
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;        now = &lt;span style=&quot;color: #cf4a44;&quot;&gt;rand&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;fprintf&lt;/span&gt;(f, &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d &quot;&lt;/span&gt;, now);
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;fclose&lt;/span&gt;(f);
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; num;
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
然后，我们需要一个将文件读入数组的函数和一个将数组内容写入文件的函数，实现如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;read_to_mem&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;FILE&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;file&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;arr&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;len&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;i&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (file != &lt;span style=&quot;color: #bebebe;&quot;&gt;NULL&lt;/span&gt;) {
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; !&lt;span style=&quot;color: #cf4a44;&quot;&gt;feof&lt;/span&gt;(file) &amp;amp;&amp;amp; i &amp;lt; len; ++i) {
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;            &lt;span style=&quot;color: #cf4a44;&quot;&gt;fscanf&lt;/span&gt;(file, &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d&quot;&lt;/span&gt;, arr + i);
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; i;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;write_from_mem&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;FILE&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;file&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;arr&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;len&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;i&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (file != &lt;span style=&quot;color: #bebebe;&quot;&gt;NULL&lt;/span&gt;) {
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; ( ; i &amp;lt; len; ++i) {
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;            &lt;span style=&quot;color: #cf4a44;&quot;&gt;fprintf&lt;/span&gt;(file, &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d &quot;&lt;/span&gt;, arr[i]);
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; i;
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成这些准备工作后，就可以开始实现外排序了。循环将大文件读入一部分到内存，然后对这一部分进行排序——此时的排序可以使用快速排序、归并排序等各种排序算法，并无限制。
&lt;/p&gt;

&lt;p&gt;
将各部分都排好序并保存为临时文件后的归并步骤是外排序的核心所在。多路归并的思路和二路归并是类似的。可以将归并模块实现为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;merge&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;File&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;out&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;File&lt;/span&gt; **&lt;span style=&quot;color: #fefc58;&quot;&gt;flist&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;fnum&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;i&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;now&lt;/span&gt; = 0;                &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#29992;&amp;#20110;&amp;#20445;&amp;#23384;&amp;#24403;&amp;#21069;&amp;#26368;&amp;#23567;&amp;#30340;&amp;#20540; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;fstaus&lt;/span&gt; = (&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *)&lt;span style=&quot;color: #cf4a44;&quot;&gt;calloc&lt;/span&gt;(fnum, &lt;span style=&quot;color: #cf4a44;&quot;&gt;sizeof&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt;)); &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#35760;&amp;#24405;&amp;#25991;&amp;#20214;&amp;#29366;&amp;#24577; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;farr&lt;/span&gt; =(&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; *)&lt;span style=&quot;color: #cf4a44;&quot;&gt;calloc&lt;/span&gt;(fnum, &lt;span style=&quot;color: #cf4a44;&quot;&gt;sizeof&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt;));    &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#35760;&amp;#24405;&amp;#20174;&amp;#21508;&amp;#20010;&amp;#25991;&amp;#20214;&amp;#20013;&amp;#21462;&amp;#20986;&amp;#30340;&amp;#25968; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;min&lt;/span&gt; = 0;                &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#35760;&amp;#24405;&amp;#24403;&amp;#21069;&amp;#20540;&amp;#26368;&amp;#23567;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#32034;&amp;#24341; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; i &amp;lt; fnum; ++i) {     &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#26816;&amp;#26597;&amp;#21508;&amp;#20010;&amp;#25991;&amp;#20214;&amp;#25351;&amp;#38024;&amp;#30340;&amp;#29366;&amp;#24577; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #cf4a44;&quot;&gt;feof&lt;/span&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;fscanf&lt;/span&gt;(flist[i], &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d&quot;&lt;/span&gt;, farr + i))) {
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;            fstatus[i] = 0;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;else&lt;/span&gt; {
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;            fstatus[i] = 1;
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while&lt;/span&gt; (1) {
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;        now = 0;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; fnum &amp;amp;&amp;amp; !fstatus[i]; ++i) {}
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (i &amp;gt;= fnum) {     &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#22914;&amp;#26080;&amp;#21487;&amp;#29992;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#21017;&amp;#36864;&amp;#20986; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;            &lt;span style=&quot;color: #cf4a44;&quot;&gt;break&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; i &amp;lt; fnum; ++i) { &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#20174;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#21487;&amp;#29992;&amp;#30340;&amp;#25991;&amp;#20214;&amp;#24320;&amp;#22987;&amp;#35835; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;            &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (fstatus[i] &amp;amp;&amp;amp; farr[i] &amp;lt; now) {
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;                now = farr[i];
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;                min = i;
&lt;span class=&quot;linenr&quot;&gt;31: &lt;/span&gt;            }
&lt;span class=&quot;linenr&quot;&gt;32: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;34: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;fprintf&lt;/span&gt;(out, &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d &quot;&lt;/span&gt;, now); &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#23558;&amp;#26368;&amp;#23567;&amp;#20540;&amp;#20889;&amp;#20837;&amp;#36755;&amp;#20986;&amp;#25991;&amp;#20214; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;36: &lt;/span&gt;        &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#35835;&amp;#21462;&amp;#35813;&amp;#25991;&amp;#20214;&amp;#19979;&amp;#19968;&amp;#20010;&amp;#25968;&amp;#65292;&amp;#24182;&amp;#26816;&amp;#26597;&amp;#26159;&amp;#21542;&amp;#35835;&amp;#23436; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;37: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #cf4a44;&quot;&gt;feof&lt;/span&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;fscanf&lt;/span&gt;(flist[min], &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%d&quot;&lt;/span&gt;, farr + min))) {
&lt;span class=&quot;linenr&quot;&gt;38: &lt;/span&gt;            fstatus[min] = 0;
&lt;span class=&quot;linenr&quot;&gt;39: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;40: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;41: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;42: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;free&lt;/span&gt;(farr);                 &lt;span style=&quot;color: #e81122;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#37322;&amp;#25918;&amp;#20869;&amp;#23384; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;43: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;free&lt;/span&gt;(fstatus);
&lt;span class=&quot;linenr&quot;&gt;44: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完整的实现我就不写了，太累……写这篇文章就用了一整天。
&lt;/p&gt;

&lt;p&gt;
嗯，大概就是这个样子。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/daoluanxiaozi/archive/2012/03/29/2423087.html&quot;&gt;《编程珠玑，字字珠玑》1234读书笔记——多路归并排序&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://diducoder.com/mass-data-topic-9-external-sort.html&quot;&gt;海量数据处理专题（九）——外排序&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/huangxincheng/archive/2012/12/19/2824943.html&quot;&gt;经典算法题每日演练——第十八题 外排序&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/v_JULY_v/article/details/6451990&quot;&gt;程序员编程艺术：第十章、如何给10^7个数据量的磁盘文件排序&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>排序算法——快速排序</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/10/quick-sort.html"/>
    <id>http://linusp.github.io/2014/01/10/quick-sort</id>
    <published>2014-01-10T00:00:00-05:00</published>
    <updated>2014-01-10T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;快速排序&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
快速排序是一种广为使用的排序算法，其算法复杂度为O(NlogN)，从效率上来说是很不错的。
&lt;/p&gt;

&lt;p&gt;
刚接触排序算法的新手可能没有办法很快地把它实现出来，但其实在对它的原理有了透彻的了解后，这一步是不难做到的。
&lt;/p&gt;

&lt;p&gt;
不记得是在哪里看到的了，说熟悉算法的最好办法，就是反复地去实现它，写完删掉重写，知道能够不怎么思考就把它写出来就算是掌握了。我就是通过这个方法来掌握排序算法的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;原理&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
快速排序采用了“分治法”，关于分治法不想说太多，更多的细节可以参考&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95&quot;&gt;维基百科&lt;/a&gt;。 具体来说，快速排序的思想是很简单的，分为两步：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;将数组划分为以某个值为分界的两部分
&lt;/li&gt;
&lt;li&gt;对划分好的两部分各自又进行快速排序
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
其中第二步就是“分治法”的体现，即所谓“分而治之”。而快速排序的实现工作大多花费在“划分”上。
&lt;/p&gt;

&lt;p&gt;
下面是快速排序的算法描述(python描述)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;qsort&lt;/span&gt;(array, low, high):
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; low &amp;lt; high:
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;mid&lt;/span&gt; = partition(array, low, high)
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;        qsort(array, low, mid - 1)
&lt;span class=&quot;linenr&quot;&gt;5: &lt;/span&gt;        qsort(array, mid + 1, high)
&lt;span class=&quot;linenr&quot;&gt;6: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;数组划分&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
我对这一部分是非常感兴趣的，因为我发现这一部分不仅仅可以用在快速排序中。
&lt;/p&gt;

&lt;p&gt;
划分首先要选定一个值作为分界线。选取这个值的方法有随机选取和固定选取两种，随机选取就不说了，顾名思义；固定选取就是选取当前要划分的区域上特定位置的元素，比如第一个元素或者最后一个元素。本文以选取最后一个元素为例来进行说明。
&lt;/p&gt;

&lt;p&gt;
划分的思想就是，遍历数组，遇到比关键值小的元素，就放到数组前面。在这样的处理过程中，数组前部会有连续的一段空间，其中的所有元素都比关键值小，因此在处理的过程中通常要用一个游标来记录这段空间的最后一个位置，遇到新的小于关键值的元素要放过来时，就将其放到游标后面的位置，并更新游标。如下图所示
&lt;/p&gt;



&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/partition.png&quot; alt=&quot;partition.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
当然，我这里说的是将比关键值小的元素交换到数组前部，也有将大于关键值的元素交换到数组尾部以及结合这两种做法的。
&lt;/p&gt;

&lt;p&gt;
数组划分的算法描述为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;partition&lt;/span&gt;(array, low, high):
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = low - 1
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;key&lt;/span&gt; = array[high]
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; index &lt;span style=&quot;color: #cf4a44;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;range&lt;/span&gt;(low, high):
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;elem&lt;/span&gt; = array[index]
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; elem &amp;lt; key:
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = cur + 1;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;            array[index], &lt;span style=&quot;color: #fefc58;&quot;&gt;array&lt;/span&gt;[cur] = array[cur], array[index]
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = cur + 1;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    array[cur], &lt;span style=&quot;color: #fefc58;&quot;&gt;array&lt;/span&gt;[high] = array[high], array[cur]
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; cur;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;完整实现&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
下面是一个完整的实现，以及对给定数组进行排序的示例。注明一下，这里的结果是通过org-babel对下面的代码块求值得到的。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;-*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;partition&lt;/span&gt;(array, low, high):
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = low - 1
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;key&lt;/span&gt; = array[high]
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; index &lt;span style=&quot;color: #cf4a44;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;range&lt;/span&gt;(low, high):
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;elem&lt;/span&gt; = array[index]
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; elem &amp;lt; key:
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;            &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = cur + 1
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;            array[index], &lt;span style=&quot;color: #fefc58;&quot;&gt;array&lt;/span&gt;[cur] = array[cur], array[index]
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = cur + 1;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;    array[cur], &lt;span style=&quot;color: #fefc58;&quot;&gt;array&lt;/span&gt;[high] = array[high], array[cur]
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; cur;
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;qsort&lt;/span&gt;(array, low, high):
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; low &amp;lt; high:
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;        &lt;span style=&quot;color: #fefc58;&quot;&gt;mid&lt;/span&gt; = partition(array, low, high)
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;        qsort(array, low, mid - 1)
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;        qsort(array, mid + 1, high)
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; array
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;&lt;span style=&quot;color: #fefc58;&quot;&gt;L&lt;/span&gt; = [5, 2, 7, 6, 3, 1, 8, 4]
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#25490;&amp;#24207;&amp;#21069;: %r&quot;&lt;/span&gt; %(L)
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;qsort(L, 0, 7)
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#25490;&amp;#24207;&amp;#21518;: %r&quot;&lt;/span&gt; %(L)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
结果
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
排序前: [5, 2, 7, 6, 3, 1, 8, 4]
排序后: [1, 2, 3, 4, 5, 6, 7, 8]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;发散&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
之前说了，快速排序算法中的数组划分其实不仅仅可用于快速排序，那么，它还可以用于什么地方呢？从我的认识来看，很多需要将数据一分为二的情境中都可以使用到这个算法，比如说 &lt;b&gt;删除字符串中的特定字符&lt;/b&gt; 以及这个问题的变形 &lt;b&gt;删除字符串中的重复字符&lt;/b&gt; 。将快速排序算法中的划分算法稍作修改，就能得到这两个问题的线性复杂度的解决办法。
&lt;/p&gt;

&lt;p&gt;
附上这两个问题的C语言代码
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;删除字符串中特定字符

&lt;p&gt;
这里的结果同样是通过org-babel对下面的代码块求值得到的
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;del_char&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;str&lt;/span&gt;, &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;del&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = -1;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;index&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;temp&lt;/span&gt; = &lt;span style=&quot;color: #25ef29;&quot;&gt;'\0'&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; index &amp;lt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;strlen&lt;/span&gt;(str); ++index) {
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (str[index] != del) {
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;            ++cur;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;            temp = str[cur];
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;            str[cur] = str[index];
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;            str[index] = str[cur];
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;    ++cur;
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;    str[cur] = &lt;span style=&quot;color: #25ef29;&quot;&gt;'\0'&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; cur;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;main&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;s&lt;/span&gt;[] = &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;abcdaaaaab&quot;&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;del_char&lt;/span&gt;(s, &lt;span style=&quot;color: #25ef29;&quot;&gt;'a'&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;printf&lt;/span&gt;(&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;, s);
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
得到的结果为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
bcdb
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;删除字符串中的重复字符，如将&quot;aabbccdd&quot;处理后得到&quot;abcd&quot;

&lt;p&gt;
这里的结果同样是通过org-babel对下面的代码块求值得到的
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;del_dup&lt;/span&gt;(&lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #fefc58;&quot;&gt;str&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;cur&lt;/span&gt; = 0;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;index&lt;/span&gt; = 1;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;temp&lt;/span&gt; = &lt;span style=&quot;color: #25ef29;&quot;&gt;'\0'&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;last&lt;/span&gt; = str[0];
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;for&lt;/span&gt; (; index &amp;lt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;strlen&lt;/span&gt;(str); ++index) {
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;        &lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (str[index] != last) {
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;            ++cur;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;            temp = str[cur];
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;            str[cur] = str[index];
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;            str[index] = str[cur];
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;        }
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;        last = str[index];
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;    }
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;    ++cur;
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;    str[cur] = &lt;span style=&quot;color: #25ef29;&quot;&gt;'\0'&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;&lt;span style=&quot;color: #ca34e2;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #cf4a44;&quot;&gt;main&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;    &lt;span style=&quot;color: #ca34e2;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;s&lt;/span&gt;[] = &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;aabbccdd&quot;&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;del_dup&lt;/span&gt;(s);
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;printf&lt;/span&gt;(&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;, s);
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;    &lt;span style=&quot;color: #cf4a44;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
得到的结果为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
abcd
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
可以看到，这两个函数&quot;del_char&quot;和&quot;del_dup&quot;和之前的qsort中的&quot;partition&quot;函数是非常相似的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>使用ox-freemind将org-mode文档导出成思维导图</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/06/freemind-with-org-mode.html"/>
    <id>http://linusp.github.io/2014/01/06/freemind-with-org-mode</id>
    <published>2014-01-06T00:00:00-05:00</published>
    <updated>2014-01-06T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;思维导图&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
思维导图是一个很好地整理知识、表达思维的工具。因为使用Linux，我更经常使用Freemind这么一个开源的思维导图工具。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/Free_Mind.png&quot; alt=&quot;Free_Mind.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Freemind本身也是一款很优秀的软件，它能够将思维导图导出成html、flah、Java Applet、Open Office文档以及PNG和JPEG两种格式的图片，并且对思维导图的绘制提供的快捷键。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://freemind.sourceforge.net/wiki/index.php/Main_Page&quot;&gt;这里&lt;/a&gt; 是Freemind的官网。
&lt;/p&gt;

&lt;p&gt;
我曾经用Freemind绘制过一张Emacs的思维导图，放到了百度的emacs贴吧里，受到了一些Emacs新手的欢迎。因为那张图存在一定的错误，于是后来我决定重新画一张，而且决心要将更全面的内容表达出来。这是个非常累人的活，我断断续续用了一天时间才完成。
&lt;/p&gt;

&lt;p&gt;
老实说Freemind已经很方便了，在熟悉了相关快捷键后，能够很高效地进行思维导图的绘制。
&lt;/p&gt;

&lt;p&gt;
不过我希望能在更熟悉的环境中来做这件事情，我希望不用再去学习另外一套操作方式，而是能在org-mode中来绘制思维导图。
&lt;/p&gt;

&lt;p&gt;
我的Org版本是8.2.3c，这个版本的org-mode中提供了ox-freemind.el来满足我这个要求。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;使用ox-freemind.el&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
所有Org的核心模块都在 &lt;b&gt;org/lisp/&lt;/b&gt; 目录下，但这个插件并不是Org的核心模块，它被放置在 &lt;b&gt;org/contrib/lisp&lt;/b&gt; 目录下，如果您没有在Emacs配置文件中将这个路径加入加载路径，那么先做好这件事，然后在配置文件中添加：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;color: #bebebe;&quot;&gt;ox-freemind&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后就可以使用 &lt;b&gt;org-freemind-export-to-freemind&lt;/b&gt; 来将Org文档导出成Freemind文档了。
&lt;/p&gt;

&lt;p&gt;
如，我新建了一个文件 &lt;i&gt;mind.org&lt;/i&gt; ，内容如下
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+TITLE:&lt;/span&gt; &lt;span style=&quot;color: #afeeee; font-weight: bold;&quot;&gt;Org-mode&lt;/span&gt;
&lt;span style=&quot;color: #fefc58;&quot;&gt;** &amp;#20889;&amp;#25991;&amp;#26723;&lt;/span&gt;
&lt;span style=&quot;color: #fefc58;&quot;&gt;** &amp;#21457;&amp;#24067;&amp;#25104;html&lt;/span&gt;
&lt;span style=&quot;color: #fefc58;&quot;&gt;** org-bable&lt;/span&gt;
&lt;span style=&quot;color: #fefc58;&quot;&gt;** &amp;#34920;&amp;#26684;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
执行 &lt;b&gt;org-freemind-export-to-freemind&lt;/b&gt; 并用Freemind打开导出成图像后，得到的结果是：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/mind.png&quot; alt=&quot;mind.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
生成的思维导图样式是在ox-freemind.el中的变量 &lt;b&gt;org-freemind-styles&lt;/b&gt; 中定义的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;ox-freemind.el中的bug&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
如果您使用和我一样版本的Org-mode，那么很可能会遇到和我一样的问题。在执行 &lt;b&gt;org-freemind-styles&lt;/b&gt; 后出错，出错信息为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
org-freemind-export-to-freemind: Symbol's function definition is void: \,
&lt;/pre&gt;

&lt;p&gt;
最后我在Org-mode的邮件列表中找到了解决方法。原链接&lt;a href=&quot;http://lists.gnu.org/archive/html/emacs-orgmode/2013-11/msg01095.html&quot;&gt;在此&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
出错的原因是 &lt;b&gt;org-freemind-export-to-freemind&lt;/b&gt; 函数的定义中有一处错误。其原始内容为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;org-freemind-export-to-freemind&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;  (&lt;span style=&quot;color: #ca34e2;&quot;&gt;&amp;amp;optional&lt;/span&gt; async subtreep visible-only body-only ext-plist)
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;    (interactive)
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let*&lt;/span&gt; ((extension (concat &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;.mm&quot;&lt;/span&gt; ))
&lt;span class=&quot;linenr&quot;&gt;5: &lt;/span&gt;         (file (org-export-output-file-name extension subtreep))
&lt;span class=&quot;linenr&quot;&gt;6: &lt;/span&gt;         (org-export-coding-system 'utf-8))
&lt;span class=&quot;linenr&quot;&gt;7: &lt;/span&gt;    (org-export-to-file 'freemind ,file
&lt;span class=&quot;linenr&quot;&gt;8: &lt;/span&gt;    async subtreep visible-only body-only ext-plist)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
将倒数第二行中的
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
org-export-to-file 'freemind ,file
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
修改为
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
org-export-to-file 'freemind file
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
嗯，没错，作者多写了一个逗号。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>完成机器学习公开课第一部分练习</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2014/01/02/finish-ml004-first-exercise.html"/>
    <id>http://linusp.github.io/2014/01/02/finish-ml004-first-exercise</id>
    <published>2014-01-02T00:00:00-05:00</published>
    <updated>2014-01-02T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
12月断断续续地看着Andrew Ng的机器学习公开课视频，因为网速还有对细节太较真的毛病，进度一直很慢——当然这和我的基础比较薄弱以及还不适应全英文学习环境有关系。
&lt;/p&gt;

&lt;p&gt;
这一阶段看的是回归问题。实际上这并不是一个复杂的问题，不过在学习的途中还要恶补相关的数学知识，花费的时间确实多了一点。
&lt;/p&gt;

&lt;p&gt;
今天把第一部分练习完成了——完成前真的很没有自信，写完那几行代码都不敢提交，:-)。不过一路提交下来都是一次通过，心里算是有了点底气，嗯，要把基础打好。
&lt;/p&gt;

&lt;p&gt;
回归问题的部分还有个逻辑回归没有看，不过从&lt;a href=&quot;http://blog.csdn.net/abcjennifer&quot;&gt;Rachel Zhang&lt;/a&gt; 的往年笔记来看，大都是我已经掌握的东西，看的时候过一遍就好，不要死抠细节了。我想快点看完回归问题的部分，因为很期待后面神经网络的部分。
&lt;/p&gt;

&lt;p&gt;
当然，越往后面就越难了啊，也许到后面就会慢慢遇到真正的困难，我希望自己能坚持下去。
&lt;/p&gt;

&lt;p&gt;
顺便说一下，利用Octave这样的工具来学习真的挺好的——当然，有Matlab更好，不过一来它是商业产品，能不用盗版产品最好就不用；二来它体积太大我的Mint分区塞不下。现在Octave能够满足我的需求，如果以后必须要用Matlab再说吧。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>修改键位+使用smex，告别Emacs小指综合症</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/31/use-smex.html"/>
    <id>http://linusp.github.io/2013/12/31/use-smex</id>
    <published>2013-12-31T00:00:00-05:00</published>
    <updated>2013-12-31T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Emacs小指综合症&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
所谓“Emacs小指综合症”，是指由于长期使用Emacs导致左手小指疼痛的问题——嗯，没错，这是我下的定义——英文说法是 &lt;b&gt;Emacs Pinky Problem&lt;/b&gt; 。这一问题的根源是因为Emacs的快捷键频繁使用键盘的 &lt;b&gt;ctrl&lt;/b&gt; 键，而由于现在被普遍应用的 &lt;b&gt;QWERTY&lt;/b&gt; 键盘布局上的 &lt;b&gt;ctrl&lt;/b&gt; 键都只能用小指来按下(不过通常Emacser只使用左侧的 &lt;b&gt;ctrl&lt;/b&gt; 键)，且在按下 &lt;b&gt;ctrl&lt;/b&gt; 时小指的负荷很大。
&lt;/p&gt;

&lt;p&gt;
这个问题是Emacs被诟病的几个主要问题之一，不过严格来说，这并不是Emacs的错，因为Emacs被设计时考虑的键盘布局和现在是不一样的，那个时候的 &lt;b&gt;esc&lt;/b&gt; 键和 &lt;b&gt;ctrl&lt;/b&gt; 键都是在比较舒服的位置的，所以这是个历史遗留问题。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;常规解决办法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;修改键位或键盘布局&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
这种办法的核心思想是通过一些措施把 &lt;b&gt;ctrl&lt;/b&gt; 键映射到物理键盘上比较好按的键位上。常见的方法是将 &lt;b&gt;ctrl&lt;/b&gt; 键和 &lt;b&gt;caps lock&lt;/b&gt; 键交换，在&lt;a href=&quot;http://planet.emacsen.org/&quot;&gt;Planet Emacsen&lt;/a&gt; 上还提到了另外一种办法：将 &lt;b&gt;ctrl&lt;/b&gt; 键和回车键交换。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;使用正确的姿势&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
在笔记本的键盘按左 &lt;b&gt;ctrl&lt;/b&gt; 键尤其难受，不过在笔记本键盘上，可以通过用手掌根部按压左 &lt;b&gt;ctrl&lt;/b&gt; 键来避免使左手小指受损。
&lt;/p&gt;

&lt;p&gt;
不过我并不习惯这种姿势。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;使用合理的键盘&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
使用设计更加合理的、符合人体工程学的键盘是解决这个问题的好办法。这个方法不仅能避免Emacs导致的问题，还能减轻其他因为长期使用电脑/键盘而出现的健康问题。
&lt;/p&gt;

&lt;p&gt;
当然，为了健康而投入资金是必须的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;使用smex插件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
smex是Emacs的一个插件，&lt;a href=&quot;http://www.emacswiki.org/emacs/Smex&quot;&gt;这里&lt;/a&gt; 是相关说明。
&lt;/p&gt;

&lt;p&gt;
smex是一个&quot;M-x&quot;快捷键的增强工具，它能够使得在Emacs中调用各种命令更为方便，能更智能地对命令进行补全，还能根据使用者调用命令的频率来猜测用户可能会执行的命令。如下图所示：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/2013-12-31-smex-use.png&quot; alt=&quot;2013-12-31-smex-use.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
不少Emacs中的命令名字都很长，所以如果不使用smex的话，一来很多命令根本记不住，二来就算记住了输入时也要花费许多的时间——这也是为什么Emacs有如此多的快捷键的原因之一吧。
&lt;/p&gt;

&lt;p&gt;
smex的使用也很简单，下载smex并放置到Emacs的加载目录中后，在配置文件中添加这么几条语句：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(load &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/.emacs.d/site-lisp/smex.el&quot;&lt;/span&gt;)
(&lt;span style=&quot;color: #cf4a44;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;color: #bebebe;&quot;&gt;smex&lt;/span&gt;)
(smex-initialize)
(global-set-key (kbd &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;M-x&quot;&lt;/span&gt;) 'smex)
(global-set-key (kbd &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;M-X&quot;&lt;/span&gt;) 'smex-major-mode-commands)
(global-set-key (kbd &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;C-c C-c M-x&quot;&lt;/span&gt;) 'execute-extended-command)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
我的办法呢，就是综合键位修改和使用smex两个方案。将 &lt;b&gt;ctrl&lt;/b&gt; 和 &lt;b&gt;caps lock&lt;/b&gt; 交换，然后绑定一些(少量)常用的命令到快捷键上，其他大部分的命令调用则使用smex。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>年末总结</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/31/annual-summary.html"/>
    <id>http://linusp.github.io/2013/12/31/annual-summary</id>
    <published>2013-12-31T00:00:00-05:00</published>
    <updated>2013-12-31T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
现在是2013年12月31日晚上，我敲下这句话时时间是21:41。一年又过去了，一年又来临了，2013年有很多快乐和无奈，我知道2014年还会有很多快乐以及无奈，生活大抵如此。
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;经历&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
2013年开始的时候，我已经签约了科大讯飞，将要进入科大讯飞研究院进行语音方面的研究工作。
&lt;/p&gt;

&lt;p&gt;
2013年开始的时候，我还住在沁苑13栋，吃着东三食堂的饭，和室友局域网联机打CS或者WAR3。
&lt;/p&gt;

&lt;p&gt;
2013年开始的时候，选定了“图片文档中文字提取技术的研究”这么一个毕业设计课题，虽然最后烂尾，但我学到了我想学习的东西。
&lt;/p&gt;

&lt;p&gt;
2013年8月8日，因身体原因，从讯飞辞职。
&lt;/p&gt;

&lt;p&gt;
2013年11月25日，参加国家公务员考试，虽然我其实并不想去当公务员。
&lt;/p&gt;

&lt;p&gt;
一年的事情，其实也就几句话而已。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;阅读&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/10583099/&quot;&gt;《全球通史》&lt;/a&gt;

&lt;p&gt;
这本书现在还在读，进度还不到一半。书很不错，着眼于历史事件后面的社会发展规律。随着阅读的深入，除了了解历史规律，也还认识到其实历史规律和人生是有相似性的，至少有些历史规律是可以用来指导人生前进方向的。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2076886/&quot;&gt;《甲骨文》&lt;/a&gt;

&lt;p&gt;
这是一个外国人看到的中国，从他人的角度来看自己，能够更了解自己。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6048276/&quot;&gt;《民国就是这么生猛》&lt;/a&gt;

&lt;p&gt;
这本书让我得以一窥民国时代的详细景象以及教科书中语焉不详的细节，而且书中多有一针见血的言论。不过语言过于通俗，情绪上主观倾向比较明显，不过，我认为读历史在于了解历史规律、社会规律和人性，在这一点上这本书让我很满意。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1120732/&quot;&gt;《宇宙为家》&lt;/a&gt;

&lt;p&gt;
从自组织理论来看待生物发展的一本书。
&lt;/p&gt;

&lt;p&gt;
嗯，无论人也好，我们这个社会也好，不过都是在混沌边缘游离的耗散系统而已。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
当然，还有一些用于消遣的小说，以及大量的博客文章，这里就不一一记录了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;学习&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;人工智能&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
做毕业设计的过程，让我了解了人工智能领域的大量知识，同时更加坚定地成为了联结主义者。
&lt;/p&gt;

&lt;p&gt;
12月陆陆续续地学习了机器学习的一些东西。
&lt;/p&gt;

&lt;p&gt;
对这个领域越深入，我就越发觉自己的无知。现在的我，充其量不过是站在门口，看到了大门里恢宏的景象，一心渴望踏进去，却又恐惧于其宽广，不知道该往哪里走。
&lt;/p&gt;

&lt;p&gt;
前阵子effyroth突然说他放弃了对DL的学习，我更加感到迷茫。我现在才明白，他在学校时候的水平就比现在的我高出了不少，而当时我还敢自大地跟他争论自己都不明白的东西——但是他却说他放弃了！我知道在这条路上走得越深入，就会碰到越多的困难，我还在门口徘徊所以我并没有感受到太多的艰难，而effyroth是一个很有主见、意志力强的人。这让我反思我是不是适合在这条路上走下去。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;程序设计&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
5个月左右时间，我并没有写多少代码——这是因为头两个月时间一直在用游戏或小说来麻痹自己，接下来的两个月在准备公务员考试，而12月，又因为迷茫不知方向而毫无动力。
&lt;/p&gt;

&lt;p&gt;
断断续续又学了一点Common Lisp；在部署Github Pages博客的过程中对HTML/CSS有了比较全面的了解；花了几天时间系统地学习了Python，现在已经能够用Python编程了；在配置Emacs的过程中终于掌握了自己编写Emacs函数的细节。
&lt;/p&gt;

&lt;p&gt;
以上大概是着一个月来的微不足道的收获。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;2014年计划&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;找到一份工作，至少能养活自己
&lt;/li&gt;
&lt;li&gt;保持身体健康
&lt;/li&gt;
&lt;li&gt;和至少十个朋友保持联络
&lt;/li&gt;
&lt;li&gt;阅读二十本书
&lt;/li&gt;
&lt;li&gt;每月至少写五篇博客
&lt;/li&gt;
&lt;li&gt;学习数学，主要是线性代数、矩阵论以及概率论
&lt;/li&gt;
&lt;li&gt;掌握机器学习的基本理论及实现方法，掌握常用的人工神经网络，编写一个C语言的神经网络库
&lt;/li&gt;
&lt;li&gt;买一个树莓派，做点事情(做什么现在还没想好)
&lt;/li&gt;
&lt;li&gt;研究Minecraft红石，至少能在Minecraft中构造出一个简单的时序逻辑电路
&lt;/li&gt;
&lt;li&gt;学会做菜
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>Ghost.org开启博客托管服务</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/16/ghost-blog.html"/>
    <id>http://linusp.github.io/2013/12/16/ghost-blog</id>
    <published>2013-12-16T00:00:00-05:00</published>
    <updated>2013-12-16T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
晚上Gmail里出现了&lt;a href=&quot;http://ghost.org&quot;&gt;Ghost&lt;/a&gt; 的邮件，说Ghost已经开启了博客托管服务，而我呢，“很荣幸”地成为了第一批有权限使用这个服务的人之一。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/2013-12-16-mail-from-ghost.png&quot; alt=&quot;2013-12-16-mail-from-ghost.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
上面还自我吹嘘说：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Our hosted platform is a premium service which allows you to set up and run a Ghost blog in a matter of seconds. It's incredibly powerful, very easy to use, and is probably the best way of running any Ghost blog online.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
那就去看一看吧，如果用起来顺手的话可以考虑把放到Github上的博客转移过去呢——毕竟从上次自己在本地部署的Ghost使用体验来看，Ghost确实是一个风格简洁又不失美观的博客平台。
&lt;/p&gt;

&lt;p&gt;
结果呢，使用这个服务是需要付费的，最低的5美刀一月，只能建一个博客，每月10000次访问量上限(抱歉因为之后点击了试用结果无法再看到这个界面了，只能凭记忆描述了)，其他更高资费的当然是拥有更高的访问量上限和博客上限啦。
&lt;/p&gt;

&lt;p&gt;
而且呢，主题也是需要付费了的哟，看看，这价钱不错哦～～功底不错的Web前端可以考虑为Ghost写主题卖钱什么的，就是不知道Ghost要拿多少成的利润啊。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/2013-12-16-ghost-market.png&quot; alt=&quot;2013-12-16-ghost-market.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
还好还有一个免费试用30天的服务，于是果断点击试用啊。获得了试用权限后，新建博客啊果然是很轻松的，这一点倒没说大话。
&lt;/p&gt;

&lt;p&gt;
总之……土豪们可以入手哟……我就算了，继续在github上死皮赖脸地混着。
&lt;/p&gt;

&lt;p&gt;
嘛，&lt;a href=&quot;http://dream-eater.ghost.io&quot;&gt;这里&lt;/a&gt; 是我试用时建立的博客，权当demo而已。当然如果您在1月16号之后看到这篇文章，就没有必要点刚才的链接啦。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>org-mode导出项目时发布所有文件而不只是被修改的文件</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/15/republish-org-project.html"/>
    <id>http://linusp.github.io/2013/12/15/republish-org-project</id>
    <published>2013-12-15T00:00:00-05:00</published>
    <updated>2013-12-15T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
使用org-mode，可以将一个目录下的所有org文件作为一个完整的项目进行导出，这个功能常常用于将写好的org文件以完整的网站结构导出成html文件。
&lt;/p&gt;

&lt;p&gt;
在这个过程中，有时候我们修改了项目的设置，比如说在 &lt;b&gt;org-publish-project-alist&lt;/b&gt; 中修改了 &lt;b&gt;html-preamble&lt;/b&gt; 或 &lt;b&gt;html-postamble&lt;/b&gt; 两个设置——这两个参数定义了项目中所有org文件导出成html时的模板。但如果修改后执行 &lt;b&gt;org-publish-project&lt;/b&gt; ，这个改变并不会被应用，因为org-mode导出项目时会检查项目中的文件，然后仅发布被修改或未被发布过的文件。这就是本文要解决的问题。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;解决方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
上述所说的org的特性——导出项目时仅对修改过或未被发布过的文件，是由org内置的变量 &lt;b&gt;org-publish-use-timestamps-flag&lt;/b&gt; 来决定的。
&lt;/p&gt;

&lt;p&gt;
通过快捷键 &lt;b&gt;C-h v&lt;/b&gt; 查看该变量的文档，可以看到它的描述是：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
org-publish-use-timestamps-flag is a variable defined in 'ox-publish.el'.
Its value is t
&lt;/p&gt;

&lt;p&gt;
Documentation:
Non-nil means use timestamp checking to publish only changed files.
When nil, do no timestamp checking and always publish all files.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
根据文档，将这个变量设置为 &lt;b&gt;nil&lt;/b&gt; 就可以改变上述org在导出项目时的行为，但是注意 &lt;b&gt;always&lt;/b&gt; 这个词。如果在配置中将这个变量的值设置为了 &lt;b&gt;nil&lt;/b&gt; ，那么每次导出项目时，所有文件都会被重新发布！而我们需要的是在 &quot;需要的时候&quot; 重新发布所有文件，每次都重新发布会带来不必要的时间消耗，这不是我们想要的。
&lt;/p&gt;

&lt;p&gt;
我的解决办法是将 &lt;b&gt;org-publish-project&lt;/b&gt; 这个命令包装成 &lt;b&gt;publish-project&lt;/b&gt; ，每当这个命令执行时，它会询问是否要重新发布所有文件，如果是则将 &lt;b&gt;org-publish-use-timestamps-flag&lt;/b&gt; 这个变量置为 &lt;b&gt;nil&lt;/b&gt; ，待发布完后又重新设回 &lt;b&gt;t&lt;/b&gt; 。
&lt;/p&gt;

&lt;p&gt;
下面是我的实现方法：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;publish-project&lt;/span&gt; (project no-cache)
   (interactive &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;sName of project: \nsNo-cache?[y/n] &quot;&lt;/span&gt;)
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (or (string= no-cache &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;y&quot;&lt;/span&gt;)
          (string= no-cache &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Y&quot;&lt;/span&gt;))
          (setq org-publish-use-timestamps-flag nil))
   (org-publish-project project)
   (setq org-publish-use-timestamps-flag t))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
我将这个函数绑定到了 &lt;b&gt;C-x p&lt;/b&gt; 这个快捷键上。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>开始学习一些东西</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/14/begin-to-learn-some-stuff.html"/>
    <id>http://linusp.github.io/2013/12/14/begin-to-learn-some-stuff</id>
    <published>2013-12-14T00:00:00-05:00</published>
    <updated>2013-12-14T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
今天继续看了百度的机器学习课程，觉得有点枯燥，于是跑到网易公开课上看Stanford的机器学习课程——Andrew Ng的CS229(2012)。虽然说第一讲讲到的都是我知道的东西，但我很喜欢Andrew Ng的讲课风格。
&lt;/p&gt;

&lt;p&gt;
一时兴起到CS229的课程主页上把今年的课程讲义都爬了下来，然后在Coursera注册了帐号观看Andrew Ng这个课程的网上课程，虽然只有英文字幕，但是勉强还能对着字幕听明白Andrew Ng说的话。
&lt;/p&gt;

&lt;p&gt;
于是打算系统地进行学习了。
&lt;/p&gt;

&lt;p&gt;
笔记照例放到gitcafe上去好了，嘿嘿。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>开始在电脑上写日记</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/12/diary-on-computer.html"/>
    <id>http://linusp.github.io/2013/12/12/diary-on-computer</id>
    <published>2013-12-12T00:00:00-05:00</published>
    <updated>2013-12-12T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
说实话，其实我还是更享受在纸上写日记的感觉。奈何现在大部分事情是在电脑上做的，通常做完就玩一会游戏睡觉，睡前经常记不起来要写日记，而每天其实都是有很多事情可以记录的。所以我想尝试在电脑上写日记，至少能保证每天都能写——我打算在org-mode里写，那么在Emacs的日程表上加上一个周期性的任务就行了。
&lt;/p&gt;

&lt;p&gt;
日记这种东西相对私密，而且写作很随意，所以我也不想发到博客上或者里其他类似的平台，暂时丢到Dropbox里吧，最近系统空间不够经常把分区搞来搞去的，只放在本地说不定就什么时候被我干掉了。
&lt;/p&gt;

&lt;p&gt;
在org-mode里写日记，我的想法是简单就好，在org-capture的模板里加了一个diary的模板:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;d&quot;&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Diary&quot;&lt;/span&gt;
     entry (file
            &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/Dropbox/org/diary.org&quot;&lt;/span&gt;)
     &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;* %t\n&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
需要写的时候按下 &lt;b&gt;C-c c&lt;/b&gt; 然后选择 &lt;b&gt;d&lt;/b&gt; 就可以了，模板也没什么内容，就是一个日期而已。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>朋友要结婚了</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/09/friend-things.html"/>
    <id>http://linusp.github.io/2013/12/09/friend-things</id>
    <published>2013-12-09T00:00:00-05:00</published>
    <updated>2013-12-09T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
在一个朋友的博客上看到，她已经定了结婚的日期，正在邀请朋友们。看到这里的时候，心里也会想一下，不知道有没有邀请我呢？
&lt;/p&gt;

&lt;p&gt;
说是朋友，不过也有三年多没见过了吧，平时联系也不多——事实上我跟谁联系都不多，我确实是个怪人。话说回来，就算她邀请了我，我还是会觉得要见到一堆的初中同学会难接受。
&lt;/p&gt;

&lt;p&gt;
说到底还是我不自信的缘故，而且，我把自己的过去都已经否定了，不愿意去想初中高中的事，也不想见到初中高中的人——这么说我确实是个孤僻的人。到底是什么事情让我变成这个样子呢？非要深究地话又要回过头去翻自己过去那堆杂乱的历史和思想了，那让我很难堪。
&lt;/p&gt;

&lt;p&gt;
我愿意正视我自己的问题，却不原意正视自己问题的根源。这是长久以来我一直不能干净利落解决问题的根源所在。
&lt;/p&gt;

&lt;p&gt;
有时候我会想，孤独也挺好的，不受打扰，可以专注于创造——但事实上这么想不过是自我安慰而已，我并没有花太多心思在真正的创造有价值的事物上面。
&lt;/p&gt;

&lt;p&gt;
或许我会变成现在这个样子有一个很简单的解释，那就是 &lt;b&gt;自我实现预言&lt;/b&gt; 。
&lt;/p&gt;

&lt;p&gt;
嗯，算了，偶尔多愁善感一下就行，还有项目要做，还要准备明年的工作，那才是重中之重。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>通俗化解释GFW工作原理</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/07/gfw-brief.html"/>
    <id>http://linusp.github.io/2013/12/07/gfw-brief</id>
    <published>2013-12-07T00:00:00-05:00</published>
    <updated>2013-12-07T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;场景约定&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
先对用户上网行为中的一些实体或行为做以下约定：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;A镇：中国互联网

&lt;p&gt;
A镇是一个小镇子，四面环山、风景优美，人民淳朴善良、勤劳勇敢。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;镇外：国外互联网

&lt;p&gt;
镇外有很多繁华的城市，丰富多彩的商品。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;居民：客户端(PC/智能终端等)

&lt;p&gt;
居民是A镇的居民，他们每个人都有一个家。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;商店：网站

&lt;p&gt;
居民们经常需要购买一些东西，这些东西就要到商店里去买，镇里镇外都有商店。居民一般是不能自己卖东西的，如果要卖东西，要经过工商局的许可，还要注册一个商店名称。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;商店名称：网站域名

&lt;p&gt;
每个商店都有一个独一无二的名称，绝不重样。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;具体地址：IP

&lt;p&gt;
每个居民的家以及商店都有一个具体的地址，如：xx街道xx号。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;购买：网络连接

&lt;p&gt;
购买就是购买，可以购买镇内的东西，也可以购买镇外的东西。购买东西的时候，商店通常都会记下购买者的地址和对方购买的商品列表。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;管家：浏览器

&lt;p&gt;
(实际上这个比拟不恰当，请不要深究)
&lt;/p&gt;

&lt;p&gt;
居民们很忙，没有空自己去买东西(有的商店也很远)，所以居民们把购买的事情交给管家去做，通常只告诉管家 &lt;b&gt;商店名称&lt;/b&gt; 和 &lt;b&gt;要买的东西&lt;/b&gt; 。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;道路：路由

&lt;p&gt;
管家是走路去的商店的，有的也开车，但是这个世界没有飞行器。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;路口：路由器

&lt;p&gt;
镇上道路四通八达，到达一个目的地有很多种走法。在每个路口都有路标，指示各个方向可以到达什么地方，比如说有一个路口的路标上有这么一句：
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
    向左拐可以到山麓百货商店
&lt;/pre&gt;

&lt;p&gt;
当然，其实向前走也可以，总之随便走，取决于管家对道路的熟悉程度了。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;交警：DNS服务器

&lt;p&gt;
管家有时候会不知道商店在哪个位置，不过没关系，他可以去问交警，交警博文强识、乐于助人，会告诉管家商店的具体地址的，然后管家就可以乐呵地去目的地了。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;谨慎购买：TCP连接

&lt;p&gt;
有些居民怕买东西上当，因为毕竟不是自己去嘛，所以又无情地压榨老管家的劳动力了(打倒资本主义!)。这是居民会先让管家按照某种规定和商店进行交流(TCP三次握手)，确定商店是可信的并且让商店也信任居民后，就可以进行谨慎购买了。这后面居民买东西时，就不用再报上自己的信息了，售货员暧昧地看了一眼老管家就知道，唔，又是这个家伙。而且，售货员会细心检查商品看有没有质量问题。
&lt;/p&gt;

&lt;p&gt;
在这种购买方式要结束时，居民会让老管家和商店说一声，这样商店知道这货不会再来买东西了。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;切口：TCP三次握手

&lt;p&gt;
在进行谨慎购买时，要对交换三次密文，用来对答切口，确定对方是否可信任。
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;第一次，管家带着用明矾水写的密文前往商店，上面写着：

&lt;pre class=&quot;example&quot;&gt;
       天王盖地虎
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;到达商店后，售货员解读了密文后，也用明矾水写一张密文，内容是：

&lt;pre class=&quot;example&quot;&gt;
       宝塔镇河妖
       地振高岗，一派溪山千古秀
&lt;/pre&gt;

&lt;p&gt;
第一句是回应管家带来的切口，第二句则是要求购买方对答的切口。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;管家把密文带回居民家中，居民解读出密文，再制作一张密文，内容为：

&lt;pre class=&quot;example&quot;&gt;
       门朝大海，三河合水万年流
&lt;/pre&gt;
&lt;p&gt;
再让管家带过去，这时候售货员和居民都可以确定了：唔，自己人！
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;随意购买：UDP连接

&lt;p&gt;
谨慎购买太麻烦了，所以有些人喜欢随意购买这种方式，告诉管家要买什么东西，到商店里拿了付钱走人就完了。不过这种情况，售货员不会帮管家检查商品质量，买回去有可能是次品(退货这种事情这里就不讨论了)。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;GFW(Great Firewall，中国互联网防火墙)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
话说小镇是一个社会主义小镇——至少小镇管理委员会是这么说的，本来吧，小镇生活挺清苦的，后来有一任镇长看不下去了，就发动了代号为”改革开发“的运动，打通了一条通往外界的道路，从此小镇日新月异，蒸蒸日上。
&lt;/p&gt;

&lt;p&gt;
但是开放有开放的问题啊。万恶的资本主义趁机侵入了小镇。
&lt;/p&gt;

&lt;p&gt;
小镇管理委员会也很无奈啊，首先吧，确实需要万恶的资本主义商店来提升小镇的GDP；其次吧，没有万恶的资本主义商店，委员会的公仆们到哪里去买好吃的好玩的来调养身心为小镇建设做好身体和心理的准备呢？
&lt;/p&gt;

&lt;p&gt;
可是你们这些资本主义商店，我们高等的社会主义小镇给了你们为我们小镇贡献GDP和表现自我的机会，除了感恩戴德之外，怎么还把 &lt;b&gt;自由&lt;/b&gt; 、 &lt;b&gt;民主&lt;/b&gt; 之类的违禁品卖给我们淳朴善良的居民们呢？什么，你说那不是坏东西？我们说是就是！
&lt;/p&gt;

&lt;p&gt;
于是，在小镇召开的第十九届全镇代表大会上，代表了全镇居民们的代表们设立了 &lt;b&gt;小镇安全委员会&lt;/b&gt; 并制订了代号为 &lt;b&gt;GFW&lt;/b&gt; 的计划，并交给了小镇第三中学的方校长来执行。可怜的方校长不过是执行者，从此却被激进无脑的小镇居民恨之入骨，人家雨果不是说过了嘛：有罪的不是犯罪的人，而是制造黑暗的人。这就和一个色狼用手骚扰了地铁上漂亮姑娘之后，法庭宣判“判当事人的右手性骚扰罪成立”一样可笑嘛，不过随便了，小镇的人们太淳朴了，大智若愚，大愚若智啊！！！
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;GFW&lt;/b&gt; 计划具体有什么内容不得而知，从目前得到的信息来看，该计划至少包含以下三部分：商店封锁计划、交警催眠计划和商品清单审查计划。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;商店封锁计划(IP黑名单)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
这个计划是这样的，对于一些不法的商店，直接封锁起来，谁也进不去——老管家当然进不去了。
&lt;/p&gt;

&lt;p&gt;
当然这个计划是有漏洞的，因为很多商店是连锁的呀！比如说谷姐百货，那连锁规模，都快赶上垃圾食品连锁店肯德鸭了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;交警催眠计划(DNS劫持)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
之前说过了，老管家是会向交警去问路的。交警催眠计划呢，就是把交警催眠了，当管家问”谷姐百货怎么走“时，交警就会告诉他一个错误的地址。老管家被压榨得太久了，脑袋不灵活啊，交警告诉他怎么走，他就怎么走，结果走到那个地方一看，好家伙，只看到满地的残骸，还有那摇摇欲坠的危墙上大大的一个 &lt;b&gt;拆&lt;/b&gt; 字。
&lt;/p&gt;

&lt;p&gt;
老管家很郁闷，回家告诉居民：主人啊，找不到地址啊，说不定是个皮包商店呢。
&lt;/p&gt;

&lt;p&gt;
这种手段主要用于防止管家到镇外去买东西，因为通往镇外的路只有一条，把那条路上的交警催眠了就OK。
&lt;/p&gt;

&lt;p&gt;
镇外的世界啊，水深火热啊，不要去的好。
&lt;/p&gt;

&lt;p&gt;
对于镇内的商店，主要是用商品清单审查计划，当然，现在对镇外的购买行为也开始使用这个了，因为有些镇外商店还是不错的，违禁品比较少，稍微审查一下就好了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;商品清单审查计划(内容审查)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
这个计划是这样的。 &lt;b&gt;小镇安全委员会&lt;/b&gt; 派出了很多隐形人，偷窥到了老管家身上带的商品清单，如果居民的商品上有违禁品，隐形人就会报告 &lt;b&gt;小镇安全委员会&lt;/b&gt; ，委员会会派出一个人伪装成对应商店的售货员，告诉老管家，”老管家啊，你这个东西我们这里没有“或者”老管家啊，你这个清单格式不对啊，结尾要加上'此致敬礼'啊“之类的。
&lt;/p&gt;

&lt;p&gt;
老管家头脑不是不太好用嘛，就回去了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;后记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
写这个东西，是为了向非专业人士解释一下 &lt;b&gt;GFW&lt;/b&gt; 的工作原理，为以后向他们传播相关安全知识做个准备。
&lt;/p&gt;

&lt;p&gt;
另外，我的某个老大跟我说过，你要能把事情跟别人说明白才能说明自己是真的懂了。大概就是这么个意思。
&lt;/p&gt;

&lt;p&gt;
后面我会讲一下突破 &lt;b&gt;GFW&lt;/b&gt; 的常规手段。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>在Heroku上部署Tornado应用</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/06/tornado-on-heroku.html"/>
    <id>http://linusp.github.io/2013/12/06/tornado-on-heroku</id>
    <published>2013-12-06T00:00:00-05:00</published>
    <updated>2013-12-06T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Heroku&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/heroku.jpg&quot; alt=&quot;heroku.jpg&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; 是一个云平台(Platform as a Service, &lt;b&gt;PaaS&lt;/b&gt;)，提供“无需准备的部署服务”。在Heroku上托管应用，所需的只是对应用本身的开发和管理，应用运行的环境以及安全防护则会由Heroku来进行，此外Heroku上还有非常丰富的Add-ons，即一些扩展服务(有些是免费的有些是收费的)，对应用开发和管理非常有用。
&lt;/p&gt;

&lt;p&gt;
免费的Heroku应用只有64MB的内存和512MB的存储，如果想部署大型的应用，最好还是付费的好。不过话说回来，每个账户可以创建的应用好像没有限制。对于个人而言，在Heroku上部署一些小应用，或者个人博客，都是可以一试的——目前已经有不少朋友在上面部署自己的个人博客了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Tornado&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.tornadoweb.org/en/stable/&quot;&gt;Tornado&lt;/a&gt; 是一个Python的Web框架，也是一个python的异步网络库，最初由FriendFeed开发——FriendFeed现已被Facebook收购。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;部署Tornado&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
Heroku 支持Ruby、Python、Java等多种类型的应用，不过Heroku的官方文档上只有对部署Flask的示例，并没有部署Tornado的说明。而实际上，部署Tornado应用和部署其他类型的应用一样，也是很简单的。
&lt;/p&gt;

&lt;p&gt;
要部署Tornado应用到Heroku上，首先需要一个编写正确可用的Tornado应用(关于Heroku的使用将在另一文中细说)，在此基础上在应用根目录下准备好以下几个配置文件：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;requirements.txt

&lt;p&gt;
该配置文件用于指示Python应用的组件依赖，详细文档 &lt;a href=&quot;https://devcenter.heroku.com/articles/python-pip&quot;&gt;在此&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;requirements.txg&lt;/i&gt; 的内容应该为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Tornado==3.1.1     # 假定应用使用3.1.1版本的Tornado，注意这里是&quot;==&quot;而不是&quot;=&quot;
...                # 其他依赖
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;Procfile

&lt;p&gt;
&lt;b&gt;Procfile&lt;/b&gt; 用于告诉Heroku处理类型以及要运行的命令，详细文档 &lt;a href=&quot;https://devcenter.heroku.com/articles/procfile&quot;&gt;在此&lt;/a&gt;。 其内容通常为如下形式：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
&amp;lt;process type&amp;gt;: command
&lt;/pre&gt;

&lt;p&gt;
假定要部署的Tornado应用的主模块为main.py，则Profile的内容可能为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
web: python main.py --port=$PORT
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;runtime.txt

&lt;p&gt;
&lt;b&gt;runtime.txt&lt;/b&gt; 用于指定Python应用使用的Python版本，举例来说，若要部署的Tornado应用要使用2.7.4版本的Python，则runtime.txt的内容应该为：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
python-2.7.4
&lt;/pre&gt;

&lt;p&gt;
Heroku支持的Python版本为：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;python-2.7.4
&lt;/li&gt;

&lt;li&gt;python-3.3.2
&lt;/li&gt;

&lt;li&gt;pypy-1.9 (我也不知道这是什么……)
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
如果应用目录下没有runtime.txt，则Heroku默认使用python-2.7.4。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>国内外图床及其对比</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/06/image-host-service.html"/>
    <id>http://linusp.github.io/2013/12/06/image-host-service</id>
    <published>2013-12-06T00:00:00-05:00</published>
    <updated>2013-12-06T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;图床是什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;图床&lt;/b&gt; 这个词来源已不可考(至少我并没有找到这个词的出处)，这个词指的一种图片托管服务(Image Hosting Services)，通常被用于进行图片的云存储和分享，也被用于博客和论坛已减轻主机存储负荷。
&lt;/p&gt;

&lt;p&gt;
一个好的图床首先应该是有外链功能的，即图片的直接分享链接，这个链接可以用在&amp;lt;img&amp;gt;标签内用于显示图片；其次外链要稳定而且访问速度要有保证，这两点是至关重要的；满足了前面两点后，还可以考虑上传的便捷性、外链是否允许自定义、是否有上传限制等等其他细节。
&lt;/p&gt;

&lt;p&gt;
国外的图床比较多而且成熟，当然了，国内也有比较好的图床。下面分别对国外和国内的图床做一个简单的对比。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;国外图床&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;名称&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;注册需要&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;免费容量&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;流量限制&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;上传限制&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;API&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;图片/外链有效期&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;图片格式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Flickr&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;雅虎邮箱&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1TB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;lt;200MB(单张)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用，支持python&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;永久&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;JPEG/PNG/GIF(非动画)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Imgur&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可不注册&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;lt;10MB,大于1MB将被压缩&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用，支持python&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;6月未访问则删除&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;JPEG/PNG/GIF/TIFF/BMP/PDF/XCFF&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;图片被压缩&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;ThumbSnap&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;不需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;lt;2MB(单张)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Photobucket&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2GB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;10GB/月&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Tinypic&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可不注册&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;1600px(w,h)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;plugin可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;90天未访问则删除&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;大部分格式&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Postimage&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可不注册&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;提供一段js&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;500px&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;lt;30MB(单张)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;永久&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;版权保护&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Picasaweb&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;5GB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;永久&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;SkyDriver&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;7GB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;不支持直接外链&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Dropbox&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2GB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;很少&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;流量过大会失效&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
国外的图片托管网站比较多，而且也比较成熟，服务品质有保证。如果是用作个人图床，如博客、论坛发帖，以上表格中的平台大部分都是可用的。至于SkyDriver和Dropbox不建议使用，因为这两者本来就不是专用于图片托管，将外链放到公开的地方会增大服务器的流量负荷，这对服务提供方是不利的，所以SkyDriver和Dropbox都有相应的措施。SkyDriver得到的外链并不是文件的直接链接，而是一个跳转链接，这个链接还会变化，用虽然能用，但并不能达到“图床”的目的；Dropbox则更阴险，如果外链流量大了，这个外链会直接失效。
&lt;/p&gt;

&lt;p&gt;
国外的图片托管网站有一个很大的优点是，不少网站都有非常丰富、完善的API，如Flickr、Imgur等等。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;国内图床&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;名称&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;注册需要&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;免费容量&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;流量限制&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;上传限制&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;API&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;图片/外链有效期&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;图片格式&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Poco&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;上传后被压缩&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;又拍云&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用，支持python&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;防盗链&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;盛大云&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;防盗链&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;阿里云&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;防盗链&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;七牛云存储&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;可用&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;付费&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;防盗链&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;六间房&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;已停止运营&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;百度云&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;需要&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;15GB&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无限制&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;生成外链复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
国内的图片托管服务，怎么说呢，因为社会环境不一样，免费的平台在整体服务质量上和国外无法相比，而且像Flickr这样的老牌网站不多，Poco算是一个，六间房也算一个(不过已经死了)。如果个人使用的话，其实还有很多网络相册类平台可以使用，比如免费的又拍相册、百度相册、网易相册、新浪微博相册等等等等，但是这些网络相册没法保证稳定的外链，而且外链的生成、提取一般也比较繁琐，有的还会带有水印。
&lt;/p&gt;

&lt;p&gt;
总而言之，国内的平台，如果需要图床，个人用途的，可选的方案很多，不过首推Poco。如果非个人用途，而是用于应用开发，为求稳定和安全，最好还是选择付费的云服务。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>Symbol t may not be buffer-local问题</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/02/terrible-conf-problem.html"/>
    <id>http://linusp.github.io/2013/12/02/terrible-conf-problem</id>
    <published>2013-12-02T00:00:00-05:00</published>
    <updated>2013-12-02T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
真是快要疯掉了……本来只是想配置好python的开发环境的，然后动了整理配置文件的念头，整理的时候更新了一些插件，结果插件和旧版本org-mode是冲突的，安装上新版本org-mode吧，因为emacs总会加载 \/usr\/share\/emacs\/24.2\/lisp\/ 以及其他几个相关目录下的一些文件，而这些文件和org-mode有关的一部分又是按照旧版本来的，新旧版本一直冲突。一怒之下把这些文件全删了自己编译安装，但是编译安装的依然报错……
&lt;/p&gt;

&lt;p&gt;
当时真是要疯掉了……
&lt;/p&gt;

&lt;p&gt;
算了，说正事。
&lt;/p&gt;

&lt;p&gt;
后来我在ubuntu系统里把对应的目录复制过来用来进行恢复，总算才好了。但是，当我尝试进行publish的时候，就……
&lt;/p&gt;

&lt;p&gt;
一直一直一直一直一直一直报这个错误：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Symbol t may not be buffer-local
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
*Message*里只有这一条信息，没有出错位置，没有任何其他信息。Google了八百遍也找不到相关的issue，当时真的是把这个Linux Mint系统格了重装的心都有了……
&lt;/p&gt;

&lt;p&gt;
后来发现自己的搜索有点问题，我是直接把这条出错信息贴在搜索框里的，而这样Google是会把这句话拆分成多个关键字来进行搜索的，而不是用这整句话！尝试用双引号括起来后终于得到了一条稍微有点参考价值的结果:
&lt;img src=&quot;../../../assets/img/2013-12-02-search-symbol-t.png&quot; alt=&quot;2013-12-02-search-symbol-t.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
这条信息向我指示了可能的出错位置:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
make-local-variable should accept a quote instead var. otherwise, it would introduce error as “Symbol nil may not be buffer-local” and fail to start ESS.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
我的配置文件里有这么一条:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;my-lisp-style&lt;/span&gt; ()
  (highlight-parentheses-mode t)
  (hs-minor-mode t)
  (set (make-local-variable 'electric-pair-mode) nil))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
而我漏写了 &lt;b&gt;electric-pair-mode&lt;/b&gt; 前面那个单引号。
&lt;/p&gt;

&lt;p&gt;
终于对上了，知道是哪里出了错，感觉真他妈好(偶尔爆个粗口)！
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>org-mode 8.x导出html时代码块不高亮问题</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/02/org8.x-export-source-code.html"/>
    <id>http://linusp.github.io/2013/12/02/org8.x-export-source-code</id>
    <published>2013-12-02T00:00:00-05:00</published>
    <updated>2013-12-02T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在我将org-mode更换为8.x版本后，按照之前的经验，无论怎么设置，导出成html时都不能产生语法高亮效果.
&lt;/p&gt;

&lt;p&gt;
以前的做法通常都是在配置文件里加上这么两句:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;color: #bebebe;&quot;&gt;htmlize&lt;/span&gt;) &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;htmlize.el&lt;/span&gt;
(setq org-src-fontify-natively t)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
但是这次这两句完全不起作用……
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;解决方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
最后在org-mode的网站上找到了相关的信息，那就是在设置org的导出项目时，要在对应的alist中添加一个 &lt;b&gt;:publishing-function&lt;/b&gt; 参数，并设置其值为非nil值，如下所示:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-publish-project-alist
    '(
      (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;project-name&quot;&lt;/span&gt;
       ......
   &lt;span style=&quot;color: #31d3c4;&quot;&gt;:htmlized-source&lt;/span&gt; t
       ......
       )
       ......))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;吐槽&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
org-mode 8.x的变化太多了……不知道官方有没有对这些改动之处做一个详细说明……虽然说文档都发生了改变，但到发生问题时再来找真的很费劲啊……
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>org-remember从org-mode中移除</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/12/02/org-remember-removed.html"/>
    <id>http://linusp.github.io/2013/12/02/org-remember-removed</id>
    <published>2013-12-02T00:00:00-05:00</published>
    <updated>2013-12-02T00:00:00-05:00</updated>
    <content type="html">
      &lt;p&gt;
因为&lt;a href=&quot;http://about.me/wlwang41&quot;&gt;Crow&lt;/a&gt; 的提议，我和他还有另外一个同学准备做一个开源项目，而在项目中需要使用python，因此这两天就在配置Emacs的python环境，同时把原来的Emacs配置文件整理了一下，这期间发生了不少问题。
&lt;/p&gt;

&lt;p&gt;
首先是为了使用最新的Emacs，在系统里添加了PPA下载了Damien Cassou维护的Emacs&lt;a href=&quot;https://launchpad.net/~cassou/%2Barchive/emacs&quot;&gt;版本&lt;/a&gt; ，而&lt;a href=&quot;https://github.com/fgallina/python.el&quot;&gt;python.el&lt;/a&gt; 在该版本Emacs下会出问题。重新从源里安装了Emacs 24后这个问题得到了解决。但因为我对配置文件的大幅度调整，导致Emacs一直提示
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Can't load library: org
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
找不到该问题源头所在的我，尝试着删除了Emacs24自带的org，用上了8.2.1的版本，不想问题就这样解决了——唔，我还是知其然不知其所以然。
&lt;/p&gt;

&lt;p&gt;
但后来又报错，说无法加载org-remember，我在org目录下一查找，发现居然没有了 &lt;b&gt;org-remember.el&lt;/b&gt; 这个文件，一时间很困惑。
&lt;/p&gt;

&lt;p&gt;
在Google上以 &lt;b&gt;org-remember&lt;/b&gt; 和 &lt;b&gt;org-mode8.x&lt;/b&gt; 为关键字，也只搜索到两条结果，不过这两条搜索结果告诉了我事实的真相。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/2013-12-02-search-org.png&quot; alt=&quot;2013-12-02-search-org.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
原来org-mode 8已经不支持org-remember.el了。
&lt;/p&gt;

&lt;p&gt;
org-remember.el的功能是建立在remember.el之上的，而remember.el并不是org-mode的一部分，估计org-mode的开发人员是为了不依赖remember.el，而将org-remember.el从新版的org-mode中移除了，并以org-capture.el来替换它。
&lt;/p&gt;

&lt;p&gt;
因此，若要使用org-mode 8，相关的配置需要进行一定的更改
&lt;/p&gt;

&lt;p&gt;
我在配置文件中为 &lt;b&gt;org-remember&lt;/b&gt; 设置了快捷键，因此要将那条语句中的 &lt;i&gt;org-remember&lt;/i&gt; 修改为 &lt;i&gt;org-capture&lt;/i&gt; 。
&lt;/p&gt;

&lt;p&gt;
其次，org-remember模板和org-capture的模板格式不一样，需要将原先org-remember的模板进行修改，对应的变量名 &lt;i&gt;org-remember-templates&lt;/i&gt; 也要改为 &lt;i&gt;org-capture-templaes&lt;/i&gt; 。
&lt;/p&gt;

&lt;p&gt;
org-capture的模板格式可以到&lt;a href=&quot;http://orgmode.org/manual/Capture-templates.html#Capture-templates&quot;&gt;这里&lt;/a&gt; 进行详细地了解。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>月底小结</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/27/month-log.html"/>
    <id>http://linusp.github.io/2013/11/27/month-log</id>
    <published>2013-11-27T00:00:00-05:00</published>
    <updated>2013-11-27T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;公务员考试&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
24号是国家公务员考试的日期，我在23号乘坐汽车到了南昌，在离考场25分钟路程的地方开了150一晚的一间房。那儿环境良好，还附送早餐和一次正餐，一觉醒来还发现门缝里塞进来几张卡片，上面印着穿着制服摆着妖娆姿势的女人，旁边写着：在校大学生、高级白领、在职空姐……随心所欲，倾情相约……
&lt;/p&gt;

&lt;p&gt;
哈哈哈哈……第一次碰到这种事情……
&lt;/p&gt;

&lt;p&gt;
考试那天下了一整天大雨，我是穿着一双湿透的鞋去考试的。当日南昌二十三中附近道路拥堵无比。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;病&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
右腹部偶尔还会有肿胀感和刺痛感。不过表哥说的没错，像我这种”读了点书的人“，就喜欢碰到什么事情翻翻书上上网就以为自己对某些事情了如指掌了，听医生的判断不要多想为好。自从被表哥说了一趟就没再怎么紧张过了，心情放松身体也会好的。
&lt;/p&gt;

&lt;p&gt;
在南昌见到凡凡，他已经瘦得皮包骨头了，颈部两侧皮肉溃烂。我也不知道该说什么。在外婆家我也没敢把凡凡的情况全告诉外婆，老人家怕她担心过了头。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;后续计划&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
首先，好好养身体。
&lt;/p&gt;

&lt;p&gt;
其次，如果公务员没考上，明天过完年，如果身体已经无碍，我就离家找工作去——我可没脸一直待在家里。事实上我希望我不要考上，档案和党组织关系的问题太头疼了，而且我是真心想在”程序员“这条道上走下去的——尽管我的身体情况可能不适合做这个。理由不仅仅是我喜欢，而是我不想半途而废。首先会尝试一下争取百度研究院的实习机会，为此我要系统地把机器学习、神经网络这些AI领域的知识学习一下；如果失败，不管是同学帮忙内推还是自己海投，相关的笔试面试技巧、常用算法我还得去复习一遍，具体计划就要慢慢来了。
&lt;/p&gt;

&lt;p&gt;
另外，高玩拉起我和老徐，说想做个开源的WEB应用，所以这段时间除了头脑风暴，我还得学会python——这对后面我找工作也是有益的。
&lt;/p&gt;

&lt;p&gt;
除了这些，还得趁这段时间多读一些书——不知道能不能把《全球通史》这本大部头给啃完……而且现在不需要操心公务员考试了，清晨和晚上的写作练习也得坚持起来。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>《ANSI Common Lisp》第三章习题</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/12/acl-ch3-exercises.html"/>
    <id>http://linusp.github.io/2013/11/12/acl-ch3-exercises</id>
    <published>2013-11-12T00:00:00-05:00</published>
    <updated>2013-11-12T00:00:00-05:00</updated>
    <content type="html">
      &lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Show the following lists in box notation:

&lt;pre class=&quot;example&quot;&gt;
(a) (a b (c d))
(b) (a (b (c (d))))
(c) (((a b) c) d)
(d) (a (b . c) . d)
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) (a . (b . ((C . (D . NIL)) . NIL)))
&lt;/p&gt;

&lt;p&gt;
(b) (a . ((B . ((C . ((D . NIL) . NIL)) . NIL)) . NIL))
&lt;/p&gt;

&lt;p&gt;
(c) (((A . (B . NIL)) . (C . NIL)) . (D . NIL))
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Write a version of &lt;b&gt;union&lt;/b&gt; that preserves the order of the elements in the original lists:

&lt;pre class=&quot;example&quot;&gt;
&amp;gt; (new-union '(a b c) '(b a d))
(A B C D)
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;new-union&lt;/span&gt; (first second)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;dolist&lt;/span&gt; (obj second)
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (not (member obj first))
        (append first (list obj)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Define a function that takes a list and returns a list indicating the number of times each (eql) element appears, sorted from most common element to least common:

&lt;pre class=&quot;example&quot;&gt;
&amp;gt; (occurrences '(a b a d a c d c a))
((A . 4) (C . 2) (D . 2) (B . 1))
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;occurrence&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((result nil))
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;dolist&lt;/span&gt; (obj lst)
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null (assoc obj result))
      (push (cons obj 1) result)
      (incf (cdr (assoc obj result)))
    ))
    (sort result #'(&lt;span style=&quot;color: #cf4a44;&quot;&gt;lambda&lt;/span&gt; (a b) (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (&amp;gt; (cdr a) (cdr b)) t nil)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Why does (member '(a) '((a) (b))) return nil?

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
因为每次产生cons调用时系统都会分配新的对象，所以'(a)和'((a) (b))中的第一个元素虽然具有同样的值，但却不是同一个对象，而member函数使用的判定函数是eql。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Suppose the function &lt;b&gt;pos+&lt;/b&gt; takes a list and returns a list of each element plus its position:

&lt;pre class=&quot;example&quot;&gt;
&amp;gt; (pos+ '(7 5 1 4))
&lt;/pre&gt;
&lt;p&gt;
Define this function using (a) recursion, (b) iteration, (c) mapcar.
&lt;/p&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) Recursive version
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;rec-pos-plus&lt;/span&gt; (lst pos)&lt;span style=&quot;color: #a07f41; background-color: #073642;&quot;&gt; &lt;/span&gt;
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (not (null lst))
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt;
    (incf (car lst) pos)
    (rec-pos-plus (cdr lst) (1+ pos)))))

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;rec-pos+&lt;/span&gt; (lst)
  (rec-pos-plus lst 0)
  lst)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(b) Iterative version
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;iter-pos+&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;do&lt;/span&gt; ((i 0 (+ i 1)))
      ((= i (length lst)) lst)
    (incf (nth i lst) i)
    ))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(c) Version using &lt;b&gt;mapcar&lt;/b&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;pos+&lt;/span&gt; (lst)
  (mapcar #'(&lt;span style=&quot;color: #cf4a44;&quot;&gt;lambda&lt;/span&gt; (x) (incf x (position x lst)))
      lst))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;After yeas of deliiberation, a government commission has decided that lists should be represented by using the cdr to point to the first element and the car to point to the rest of the list. Define the government versions of the following functions:

&lt;pre class=&quot;example&quot;&gt;
(a) cons
(b) list
(c) length (for lists)
(d) member (for lists; no keywords)
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) cons
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;cons&lt;/span&gt; (x y)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((result '(nil . nil)))
    (setf (cdr result) x)
    (setf (car result) y)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(b) list
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;list&lt;/span&gt; (&lt;span style=&quot;color: #ca34e2;&quot;&gt;&amp;amp;rest&lt;/span&gt; arg)
  arg)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(c) length (for lists)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;length&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null lst)
      0
      (+ 1 (length (car lst)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(d) member (for lists; no keywords)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;member&lt;/span&gt; (element list)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;cond&lt;/span&gt; ((null list) nil)
        ((eql element (cdr list)) list)
        (t (member element (car list)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Modify the program in Figure 3.6 to use fewer cons cells. (Hing: Use dottedlists.)

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;n-elts&lt;/span&gt; (elt n)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (&amp;gt; n 1)
      (cons n elt)
      elt))

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;compr&lt;/span&gt; (elt n lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null lst)
      (list (n-elts elt n))
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((next (car lst)))
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (eql next elt)
        (compr elt (+ n 1) (cdr lst))
        (cons (n-elts elt n)
          (compr next 1 (cdr lst)))))))

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;compress&lt;/span&gt; (x)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (consp x)
      (compr (car x) 1 (cdr x))
      x))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Define a function that takes a list and prints it in dot natation:

&lt;pre class=&quot;example&quot;&gt;
&amp;gt; (showdots '(a b c))
(A . (B . (C . NIL)))
NIL
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;showdots&lt;/span&gt; (list)
(&lt;span style=&quot;color: #cf4a44;&quot;&gt;cond&lt;/span&gt; ((null list) nil)
  ((consp list) (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt;
         (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;(&quot;&lt;/span&gt;)
         (showdots (car list))
         (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot; . &quot;&lt;/span&gt;)
         (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null (cdr list))
             (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;NIL&quot;&lt;/span&gt;)
             (showdots (cdr list)))
         (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;)&quot;&lt;/span&gt;)
         ))
  (t (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~a&quot;&lt;/span&gt; list))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Write a program to find the &lt;i&gt;longest&lt;/i&gt; finite path through a network represented as in Section 3.15. The network may contain cycles.

&lt;p&gt;
My answer(对shortest-path的改写):
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;new-paths&lt;/span&gt; (path node net)
  (mapcar #'(&lt;span style=&quot;color: #cf4a44;&quot;&gt;lambda&lt;/span&gt; (n)&lt;span style=&quot;color: #a07f41; background-color: #073642;&quot;&gt; &lt;/span&gt;
               (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (not (member n path)) &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#21028;&amp;#26029;&amp;#19979;&amp;#19968;&amp;#23618;&amp;#33410;&amp;#28857;&amp;#26159;&amp;#21542;&amp;#21253;&amp;#21547;&amp;#22312;&amp;#36335;&amp;#24452;&amp;#20013;&amp;#20197;&amp;#21066;&amp;#38500;&amp;#29615;&amp;#30340;&amp;#24433;&amp;#21709;&lt;/span&gt;
                   (cons n path)))
          (cdr (assoc node net))))

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;bfs&lt;/span&gt; (end quene net)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null quene)
      nil
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((path (car quene)))
        (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((node (car path)))
          (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (eql node end)
              (reverse path)
              (bfs end
                   (sort (append (cdr quene) &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#25490;&amp;#24207;&amp;#20197;&amp;#20445;&amp;#35777;&amp;#26368;&amp;#38271;&amp;#30340;&amp;#36335;&amp;#24452;&amp;#22312;&amp;#38431;&amp;#21015;&amp;#26368;&amp;#21069;&amp;#26041;&lt;/span&gt;
                                 (new-paths path node net))
                         #'&amp;gt;
                         &lt;span style=&quot;color: #31d3c4;&quot;&gt;:key&lt;/span&gt; #'length)
                   net))))))

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;longest-path&lt;/span&gt; (start end net)
  (bfs end (list (list start)) net))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
= =写个题比拿半生不熟的英文来记笔记还累……
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>《ANSI Common Lisp》第二章习题</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/09/acl-ch2-exercises.html"/>
    <id>http://linusp.github.io/2013/11/09/acl-ch2-exercises</id>
    <published>2013-11-09T00:00:00-05:00</published>
    <updated>2013-11-09T00:00:00-05:00</updated>
    <content type="html">
      &lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Describe what happens when the following expressions are evaluated:

&lt;pre class=&quot;example&quot;&gt;
(a) (+ (- 5 1) (+ 3 7))
(b) (list 1 (+ 2 3))
(c) (if (listp 1) (+ 1 2) (+ 3 4))
(d) (list (and (listp 3) t) (+ 1 2))
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) 14
&lt;/p&gt;

&lt;p&gt;
(b) (1 5)
&lt;/p&gt;

&lt;p&gt;
(c) 7
&lt;/p&gt;

&lt;p&gt;
(d) (NIL 3)
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Give three distinct cons expressions that return (a b c).

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(cons 'a '(b c))
(cons 'a (cons 'b '(c)))
(cons 'a (cons 'b (cons 'c nil)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Using &lt;b&gt;car&lt;/b&gt; and &lt;b&gt;cdr&lt;/b&gt;,define a function to return the fourth element of a list.

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;fourth&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (listp lst)
    (car (cdr (cdr (cdr lst))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Define a function that takes two arguments and returns the greater of the two.

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;greater&lt;/span&gt; (a b)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (equal (type-of a)
             (type-of b))
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;cond&lt;/span&gt; ((typep a 'number) (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (&amp;gt; a b) a b)
            ((typep a 'character) (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (char&amp;gt; a b) a b))
            ((typep a 'string) (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (string&amp;gt; a b) a b))
            (t nil)))
      nil))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;What do hese functions do?

&lt;p&gt;
(a)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;enigma&lt;/span&gt; (x)
  (and (not (null x))
       (or  (null (car x))
            (enigma (cdr x)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(b)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;mystery&lt;/span&gt; (x y)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null y)
      nil
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (eql (car y) x)
          0
          (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((z (mystery x (cdr y))))
            (and z (+ z 1))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) 该函数用于判断一个非空的list中是否含有 &lt;b&gt;NIL&lt;/b&gt; 元素.
&lt;/p&gt;

&lt;p&gt;
(b) 判断y中是否有元素和x相等(同一个对象)，若无则返回NIL，若有则返回该元素在y中的索引(以0为初始值).
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;What could occur in place of the &lt;b&gt;x&lt;/b&gt; in each of the following exchanges?

&lt;pre class=&quot;example&quot;&gt;
(a) &amp;gt; (car (x (cdr '(a (b c) d))))
    B
(b) &amp;gt; (x 13 (/ 1 0))
    13
(c) &amp;gt; (x #'list 1 nil)
    (1)
&lt;/pre&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) cdr.
&lt;/p&gt;

&lt;p&gt;
(b) or.
&lt;/p&gt;

&lt;p&gt;
(c) apply.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Using only operators introduced in this Chapter, define a function that takes a list as an argument and returns true if one of its elements is a list.

&lt;p&gt;
My answer:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;have-list-member&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null lst)
      nil
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (listp (car lst))
          t
          (have-list-member (cdr lst)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
注：本章出现的操作符有：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
+ / - quote list cons car cdr third listp null not if and or defun &amp;gt; eql read format let defparameter defconstant setf remove do dolist progn function apply funcall lambda typep
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;Give iterative and recursive definitions of a function that

&lt;p&gt;
(a) takes a positive integer and prints that many dots.
&lt;/p&gt;

&lt;p&gt;
(b) takes a list and returns the number of times the symblo &lt;b&gt;a&lt;/b&gt; occurs in it.
&lt;/p&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) dot-plot
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Iteractive version
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;dot-plot-iter&lt;/span&gt; (n)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;do&lt;/span&gt; ((n n (- n 1)))
      ((= n 0) 'done)
    (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;.&quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Recursive version
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;dot-plot-rec&lt;/span&gt; (n)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (= n 0)
      'done
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt;
        (format t &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;.&quot;&lt;/span&gt;)
        (dot-plot-rec (- n 1)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
(b) times-of-a
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Iteractive version
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;bfs&lt;/span&gt; (lst)                     &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#24191;&amp;#24230;&amp;#20248;&amp;#20808;&amp;#36941;&amp;#21382;&amp;#65292;&amp;#24471;&amp;#21040;lst&amp;#30340;&amp;#25152;&amp;#26377;&amp;#26641;&amp;#21494;&amp;#33410;&amp;#28857;&amp;#30340;&amp;#21015;&amp;#34920;&lt;/span&gt;
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((stack (list lst))           &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#36941;&amp;#21382;&amp;#25152;&amp;#38656;&amp;#26632;&lt;/span&gt;
        (leaves nil))                &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#23384;&amp;#25918;&amp;#26641;&amp;#21494;&amp;#33410;&amp;#28857;&amp;#30340;&amp;#21015;&amp;#34920;&lt;/span&gt;
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;do&lt;/span&gt; ()
        ((null stack) leaves)        &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#24403;&amp;#26632;&amp;#31354;&amp;#26102;&amp;#65292;&amp;#36941;&amp;#21382;&amp;#32467;&amp;#26463;&lt;/span&gt;
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((now (pop stack)))       &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#23558;&amp;#26632;&amp;#39030;&amp;#33410;&amp;#28857;&amp;#20986;&amp;#26632;&lt;/span&gt;
        (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (listp now)              &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#33509;&amp;#20986;&amp;#26632;&amp;#33410;&amp;#28857;&amp;#19981;&amp;#20026;&amp;#26641;&amp;#21494;&amp;#33410;&amp;#28857;&amp;#26102;&amp;#65292;&amp;#23558;&amp;#20854;&amp;#23376;&amp;#26641;&amp;#20837;&amp;#26632;&lt;/span&gt;
            (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt; (push (car now) stack)
                   (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (not (null (cdr now)))   &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#36825;&amp;#37324;&amp;#35201;&amp;#21028;&amp;#26029;cdr&amp;#26159;&amp;#21542;&amp;#20026;nil&amp;#65292;&amp;#21542;&amp;#21017;&amp;#23558;&amp;#20854;&amp;#20837;&amp;#26632;&amp;#21518;&lt;/span&gt;
                       (push (cdr now) stack))) &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;listp&amp;#23545;&amp;#20854;&amp;#21028;&amp;#26029;&amp;#30340;&amp;#32467;&amp;#26524;&amp;#20026;&amp;#30495;&amp;#65292;&amp;#23548;&amp;#33268;&amp;#26080;&amp;#31351;&amp;#36882;&amp;#24402;&lt;/span&gt;
            (push now leaves))))))   &lt;span style=&quot;color: #e81122;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#33509;&amp;#20986;&amp;#26632;&amp;#33410;&amp;#28857;&amp;#20026;&amp;#26641;&amp;#21494;&amp;#33410;&amp;#28857;&amp;#65292;&amp;#23558;&amp;#20854;&amp;#25918;&amp;#20837;leaves&amp;#21015;&amp;#34920;&amp;#20013;&lt;/span&gt;

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;times-of-a-iter&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((leaves (bfs lst))
        (times 0))
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;dolist&lt;/span&gt; (obj lst)
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (equal 'a obj)
          (setf times (+ times 1))))
    times))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Recursive version
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;times-of-a-rec&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null lst)
       0
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((now (car lst)))
        (+ (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (listp now)
               (times-of-a-rec now)
               (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (equal now 'a) 1 0))
           (times-of-a-rec (cdr lst))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;A friend is trying to write a function that returns the sum of all the non-nil elements in a list. He has written two versions of this function, and neither of them work.Explain what's wrong with each, and give a correct version:

&lt;p&gt;
(a)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;summit&lt;/span&gt; (lst)
  (remove nil lst)
  (apply #'+ lst))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(b)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;summit&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((x (car lst)))
    (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null x)
        (summit (cdr lst))
        (+ x (summit (cdr lst))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
My answer:
&lt;/p&gt;

&lt;p&gt;
(a) remove是没有副作用(side-effect)的，所以lst中的 &lt;b&gt;nil&lt;/b&gt; 元素还在 lst中，正确的代码应为
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;summit&lt;/span&gt; (lst)
  (apply #&amp;#8216;+ (remove nil lst)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(b) 没有递归终止条件，正确的代码应为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;summit&lt;/span&gt; (lst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null lst)
      0
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((x (car lst)))
        (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (null x)
            (summit (cdr lst))
            (+ x (summit (cdr lst)))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;

    </content>
  </entry>
  
  <entry>
    <title>丧心病狂:用Emacs阅读PDF文档</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/06/emacs-pdf.html"/>
    <id>http://linusp.github.io/2013/11/06/emacs-pdf</id>
    <published>2013-11-06T00:00:00-05:00</published>
    <updated>2013-11-06T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;DocViewMode&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Emacs有个插件叫做&lt;a href=&quot;http://www.emacswiki.org/emacs/DocViewMode&quot;&gt;DocViewMode&lt;/a&gt;， 为Emacs提供了对PDF、PS等格式文件的支持，其原理是将这些文件转换成png格式的图片，并在Emacs中显示。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;安装&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
从Emacs 23开始，默认就安装了DocViewMode，不过为了能够正常工作，还需要在系统中安装这两个东西：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;xpdf
&lt;/li&gt;
&lt;li&gt;ghostscript
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
安装好后，像打开常规文件那样打开PDF文件就行了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;感受&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
怎么说呢……打开小的PDF文件还可以,比如说这个：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/img/2013-11-06-emacs-pdf-view.png&quot; alt=&quot;2013-11-06-emacs-pdf-view.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
操作也简单，+/- 进行缩放，n/p进行翻页。
&lt;/p&gt;

&lt;p&gt;
然后我丧心病狂地按了C-x C-f后输入了：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
~/Dropbox/book/lisp/ANSI_Common_Lisp.pdf
&lt;/pre&gt;
&lt;p&gt;
然后就悲剧了……
&lt;/p&gt;

&lt;p&gt;
所以说某篇文章说的把Emacs设置成默认PDF阅读器这种事还是不要做的好。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>在Linux系统中屏蔽独立显卡</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/04/video-card.html"/>
    <id>http://linusp.github.io/2013/11/04/video-card</id>
    <published>2013-11-04T00:00:00-05:00</published>
    <updated>2013-11-04T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
对于Linux系统来说，显卡驱动一直都是一个很头疼的问题，更别说双显卡了。但是很不幸的，我的笔记本是双显卡，更不幸的是，还是Intel核心显卡+AMD独立显卡这种及其蛋疼的组合。
&lt;/p&gt;

&lt;p&gt;
在我还没有处理这个问题时，每次开机后，经常能够听到独立显卡风扇狂转的声音，但是实际上当时我并没有运行什么需要显卡进行大量计算的程序。这个问题不仅带来噪声问题（你说这声音要是一直在响，听习惯了也没什么，问题时它一会响一会不响，声音也一会大一会小），还对机器的散热带来了不好的影响。
&lt;/p&gt;

&lt;p&gt;
所以要解决它！
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;解决方案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
一种办法是安装独立显卡驱动，同时要做一些处理使得系统能够在独立显卡和集成显卡之间智能切换。这种方法能够彻底解决问题，也能够发挥独立显卡的性能，但这种方法非常费力，而且不一定能够成功。
&lt;/p&gt;

&lt;p&gt;
另外一种方法是屏蔽独立显卡——说真的，我在Linux下并没有太多需要用到独立显卡的时候——当然在Windows下玩盗版大型游戏的时候就需要了。屏蔽独立显卡也有两种方式，一种是通过BIOS屏蔽，另外一种是通过系统实现软屏蔽。
&lt;/p&gt;

&lt;p&gt;
很遗憾的是，笔记本的BIOS功能被阉割过，没有提供屏蔽独显的操作，而且BIOS进行了屏蔽的话，Windows系统同样也不能使用独立显卡了，这就不太满足期望了。所以最好的选择就是通过系统进行软屏蔽了。
&lt;/p&gt;

&lt;p&gt;
办法就是通过内核提供的 &lt;b&gt;vgaswitcheroo&lt;/b&gt; 组件来关闭独立显卡的电源。
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;首先切换到root用户（普通用户即使用sudo也不方便操作）
&lt;/li&gt;
&lt;li&gt;查看当前双显卡使用状态

&lt;p&gt;
这一步要通过 &lt;b&gt;/sys/kernel/debug/vgaswitcheroo/switch&lt;/b&gt; 这个文件来进行。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
cat /sys/kernel/debug/vgaswitcheroo/switch
&lt;/pre&gt;
&lt;p&gt;
这步是要读出 /sys/kernel/debug/vgaswitcheroo/switch 这一文件的信息。不出意外您可能会看到类似下面（但不完全相同）的内容：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
0:IGD:+:Pwr:0000:00:02.0
1:DIS: :Pwr:0000:01:00.0
&lt;/pre&gt;
&lt;p&gt;
其中 &lt;b&gt;IGD&lt;/b&gt; 表示集成显卡， &lt;b&gt;DIS&lt;/b&gt; 表示独立显卡， &lt;b&gt;+&lt;/b&gt; 号表示当前连接上的显卡， &lt;b&gt;Pwr&lt;/b&gt; 表示正在供电（若不供电则为 &lt;b&gt;Off&lt;/b&gt; ）。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;关闭独立显卡

&lt;p&gt;
如果确实是上面所述的状态，那么执行：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
echo OFF &amp;gt; /sys/kernel/debug/vgaswitcheroo/switch
&lt;/pre&gt;
&lt;p&gt;
关闭未连接的显卡（即独显）的电源即可，不过这种方法只是暂时的方法，一旦重启就又会听到显卡风扇狂转了。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;开机关闭独立显卡

&lt;p&gt;
将关闭独立显卡的命令写入系统启动时加载的脚本就能够在开机的时候关闭独立显卡的电源。如我的发行版是Linux Mint，将这三条命令写入/etc/init.d/rc.local中：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
echo ON &amp;gt; /sys/kernel/debug/vgaswitcheroo/switch
echo IGD &amp;gt; /sys/kernel/debug/vgaswitcheroo/switch
echo OFF &amp;gt; /sys/kernel/debug/vgaswitcheroo/switch
&lt;/pre&gt;
&lt;p&gt;
前两条命令是为了保证系统能够连接上集成显卡并供电。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
实际上也可以使用本文提供的方法对集显进行屏蔽。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>博客拆分完成</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/11/04/blog-plan-finished.html"/>
    <id>http://linusp.github.io/2013/11/04/blog-plan-finished</id>
    <published>2013-11-04T00:00:00-05:00</published>
    <updated>2013-11-04T00:00:00-05:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;现状&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
之前说过，要将博客划分为三部分，分别通过site44、Gitcafe Paegs和Github Pages来进行发布。现在已经基本完成这一计划了，尚待改进的就是一些字体啊、布局啊的细微调整了。
&lt;/p&gt;

&lt;p&gt;
没错，现在呢，依靠Dropbox和Github/Gitcafe，我写作的东西分别放到了三个不同的地方
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;index.html&quot;&gt;Linusp's Blog&lt;/a&gt;

&lt;p&gt;
一旦有什么想法要去实验，或者有什么牢骚想要倾吐，我都会放到依靠Github Pages建立的博客上来，也就是本站了。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linusp.gitcafe.com&quot;&gt;Linusp's Notes&lt;/a&gt;

&lt;p&gt;
所有我的学习、阅读笔记，我都会放到依靠Gitcafe Pages建立的个人网站上，在这个网站上，同一个主题的笔记都会集中在一个页面上，同时我会尽量做到让同一主题的笔记内容有条理。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linusp.site44.com&quot;&gt;Linusp's Novels&lt;/a&gt;

&lt;p&gt;
最后，我的一些小说作品，会放到Dropbox上，同时通过site44应用来进行发布。目前来说，我写的东西还是比较——嗯，怎么说呢，非常的没有深度吧。不过我会继续努力的。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
现在来说，存在的尚待解决的问题有：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linusp's Notes上的字体和颜色还需要调整（用的是&lt;a href=&quot;http://lifegoo.pluskid.org/wiki/index.html&quot;&gt;星黎殿&lt;/a&gt; 的模板）。
&lt;/li&gt;
&lt;li&gt;Linusp's Novels上需要添加一个返回首页的导航按钮，我是希望它尽量简洁。
&lt;/li&gt;
&lt;li&gt;Linusp's Notes和Linusp's Novels还没有做过SEO，也没有提供feed链接，这些都是以后要做的。
&lt;/li&gt;
&lt;li&gt;Linusp's Blog上需要添加一个返回页面顶端的按钮。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>伪语音合成(2)</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/20/daily-shell-t2s2.html"/>
    <id>http://linusp.github.io/2013/10/20/daily-shell-t2s2</id>
    <published>2013-10-20T00:00:00-04:00</published>
    <updated>2013-10-20T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
今天实现了中英文的选择，当然，并没有对可能出现的错误情况进行处理，比如说选项指明是英文而文本内容是中文……
&lt;/p&gt;

&lt;p&gt;
首先，昨天写的那个脚本有点问题，先来看一下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;bash&lt;/span&gt;
&lt;span style=&quot;color: #ed8a0c;&quot;&gt;t2s&lt;/span&gt;() { 
    wget -q -U Mozilla -O $(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt;| cut -b 1-15).mp3 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=en&amp;amp;q=$(&lt;/span&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt; ' ' + &amp;lt;&amp;lt;&amp;lt; &quot;&lt;/span&gt;$&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;)&quot;&lt;/span&gt;; 
}

&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;=$(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt; | cut -b 1-15).mp3;
t2s $&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; play $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt; -q &amp;amp;&amp;amp; rm $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当文本是用空格分开时，这个脚本会出错，原因是传递给函数的参数会严格按照空格进行划分，也就是说，类似
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
'how are you'
&lt;/pre&gt;
&lt;p&gt;
这样本来预期作为t2s函数的第一个参数会被分割成 how、are、you三个部分并将其作为t2s函数的 &lt;b&gt;三个参数&lt;/b&gt; ，导致错误。
&lt;/p&gt;

&lt;p&gt;
正确的做法是将$1用双引号包裹起来。
&lt;/p&gt;

&lt;p&gt;
这是今天修改后的脚本代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;bash&lt;/span&gt;

&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span style=&quot;color: #ed8a0c;&quot;&gt;t2s&lt;/span&gt;() 
{
    &lt;span style=&quot;color: #fefc58;&quot;&gt;first&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt;;
    &lt;span style=&quot;color: #fefc58;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;=$(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$first&quot;&lt;/span&gt;| cut -b 1-15).mp3;

    &lt;span style=&quot;color: #31d3c4;&quot;&gt;shift&lt;/span&gt;;

    &lt;span style=&quot;color: #cf4a44;&quot;&gt;while &lt;/span&gt;&lt;span style=&quot;color: #31d3c4;&quot;&gt;getopts&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;ez&quot;&lt;/span&gt; arg
    &lt;span style=&quot;color: #cf4a44;&quot;&gt;do&lt;/span&gt;
    &lt;span style=&quot;color: #cf4a44;&quot;&gt;case&lt;/span&gt; $&lt;span style=&quot;color: #fefc58;&quot;&gt;arg&lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt; in&lt;/span&gt;
        e)
        &lt;span style=&quot;color: #fefc58;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;en&quot;&lt;/span&gt;;
        ;;
        z)
        &lt;span style=&quot;color: #fefc58;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;zh&quot;&lt;/span&gt;;
        ;;
        ?)
        &lt;span style=&quot;color: #31d3c4;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Usage : t2s &amp;lt;text&amp;gt; -e/-z&quot;&lt;/span&gt;;
        &lt;span style=&quot;color: #31d3c4;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;   -e : in English&quot;&lt;/span&gt;;
        &lt;span style=&quot;color: #31d3c4;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;   -z : in Chinese&quot;&lt;/span&gt;;
        &lt;span style=&quot;color: #cf4a44;&quot;&gt;exit&lt;/span&gt; 1;
        ;;
    &lt;span style=&quot;color: #cf4a44;&quot;&gt;esac&lt;/span&gt;
    &lt;span style=&quot;color: #cf4a44;&quot;&gt;done&lt;/span&gt;

    wget -q -U google-chrome -O $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=$lang&amp;amp;q=$(&lt;/span&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt; ' ' + &amp;lt;&amp;lt;&amp;lt; &quot;$first&quot;)&quot;&lt;/span&gt;; 
}

t2s &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt; $&lt;span style=&quot;color: #fefc58;&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; play $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt; -q &amp;amp;&amp;amp; rm $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
当然了……脚本参数的处理是很直接简单的处理方式。
&lt;/p&gt;

&lt;p&gt;
另外，Google的中文语音合成效果不怎么样啊，不过其他的语音产品貌似不提供像Google这样的API，那也没办法了。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>博客分拆计划</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/20/blog-plan.html"/>
    <id>http://linusp.github.io/2013/10/20/blog-plan</id>
    <published>2013-10-20T00:00:00-04:00</published>
    <updated>2013-10-20T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
准备将博客分拆成三部分——笔记、小说和博客。当然了，这个博客实际上不包含笔记部分，这是我打算做的。
&lt;/p&gt;

&lt;p&gt;
博客处于展示和正确指导别人的目的，在写作的时候会比较注重实践检验，也会注重可能存在的和读者的互动，在另一方面博客可能也会更碎片化；而笔记更多的是个人的总结以及对知识、经验的组织和整理，更多地作为对自己所知所学的归纳、总结以及归档备份，而不是展示；小说这类的&quot;文学性质&quot;的东西的话，不像写技术文章一样要插入代码、图片等东西，也不需要什么分类、标签，只要文本就OK，而且在这个为了在Github Pages上运行而牺牲了一部分org-mode功能的博客上，写作会受到影响。
&lt;/p&gt;

&lt;p&gt;
所以就决定这样拆分。
&lt;/p&gt;

&lt;p&gt;
博客还是会放在这里，这里会用来发布一些技术性的文章以及生活琐事、无病呻吟etc。
&lt;/p&gt;

&lt;p&gt;
小说计划放到site44上——org文件也会在Dropbox里，这样我就不用担心数据丢失的问题。
&lt;/p&gt;

&lt;p&gt;
同样，笔记的org文件将会在Dropbox里进行存储和备份，发布则计划通过gitcafe——我还是相信gitcafe能够长久生存下去的，那么用一下gitcafe的pages服务也挺好的。
&lt;/p&gt;

&lt;p&gt;
当然了，这三部分放到这个博客里其实也没什么，但是既然我有site44的帐号，又有gitcafe帐号，我想充分利用一下吧。
&lt;/p&gt;

&lt;p&gt;
或者以后博客也会改成更加简洁的风格——说实话，什么分类、标签什么的东西都是眼子，有时候一些文章实在不知道该怎么分类……
&lt;/p&gt;

&lt;p&gt;
就是这样.
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>伪语音合成(1)</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/19/daily-shell-text2speech.html"/>
    <id>http://linusp.github.io/2013/10/19/daily-shell-text2speech</id>
    <published>2013-10-19T00:00:00-04:00</published>
    <updated>2013-10-19T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
今天在&lt;a href=&quot;http://www.commandlinefu.com/commands/browse&quot;&gt;commandlinefu.com&lt;/a&gt; 上面看到一个函数的定义，挺有意思的，来看一下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;t2s&lt;/span&gt;() { wget -q -U Mozilla -O $(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt;| cut -b 1-15).mp3 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=en&amp;amp;q=$(&lt;/span&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt; ' ' + &amp;lt;&amp;lt;&amp;lt; &quot;&lt;/span&gt;$&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;)&quot;&lt;/span&gt;; }
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
下面注明了： 
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Usage: t2s 'how are you?'
&lt;/pre&gt;

&lt;p&gt;
这个函数很有意思，首先看这个函数的名字：t2s。
&lt;/p&gt;

&lt;p&gt;
t2s是 &lt;b&gt;Text to Speech&lt;/b&gt; 的缩写，也就是 &lt;b&gt;语音合成&lt;/b&gt; 了，这个函数的功能正是语音合成，即将传入t2s函数的参数——文本，转换为语音。
&lt;/p&gt;

&lt;p&gt;
再看看函数体：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;wget -q -U Mozilla -O $(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt;| cut -b 1-15).mp3 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=en&amp;amp;q=$(&lt;/span&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt; ' ' + &amp;lt;&amp;lt;&amp;lt; &quot;&lt;/span&gt;$&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;)&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
没什么太复杂的东西，就是一条wget命令，不过其参数稍微复杂。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;-q&lt;/b&gt; 选项是让wget以 &lt;b&gt;quiet&lt;/b&gt; 模式运行， &lt;b&gt;-U&lt;/b&gt; 指定浏览器（我也不知道为什么要指定，试了一下，不加的话结果会是错的……）， &lt;b&gt;-O&lt;/b&gt; 指定下载下来的文件名。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;-O&lt;/b&gt; 选项的参数是一条shell命令的输出结果和 &lt;b&gt;.mp3&lt;/b&gt; 这个后缀名的连接起来的结果：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;tr &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt; | cut -b 1-15
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
这条命令将函数t2s的第一个参数中的空格替换成下划线 &lt;b&gt;_&lt;/b&gt; ，然后最多取15个字符。
&lt;/p&gt;

&lt;p&gt;
重点是后面那个网络地址：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=en&amp;amp;q=
&lt;/pre&gt;
&lt;p&gt;
这个是Google翻译的TTS的web api，通过它可以直接获取Google翻译界面的文本朗读功能对应的mp3文件。上面这个api要在后面加上要朗读的单词才是完整的——若有多个单词，则以 &lt;b&gt;+&lt;/b&gt; 号连接。
&lt;/p&gt;

&lt;p&gt;
然后我根据这个函数写了一个小脚本：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #cf4a44;&quot;&gt;bash&lt;/span&gt;
&lt;span style=&quot;color: #ed8a0c;&quot;&gt;t2s&lt;/span&gt;() { 
    wget -q -U Mozilla -O $(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt;| cut -b 1-15).mp3 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;amp;tl=en&amp;amp;q=$(&lt;/span&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt; ' ' + &amp;lt;&amp;lt;&amp;lt; &quot;&lt;/span&gt;$&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;)&quot;&lt;/span&gt;; 
}

&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;=$(&lt;span style=&quot;color: #fa8072;&quot;&gt;tr&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;' '&lt;/span&gt; _ &amp;lt;&amp;lt;&amp;lt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;$1&quot;&lt;/span&gt; | cut -b 1-15).mp3;
t2s $&lt;span style=&quot;color: #fefc58;&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; play $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt; -q &amp;amp;&amp;amp; rm $&lt;span style=&quot;color: #fefc58;&quot;&gt;FILE&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我这里用了play命令来直接在终端中播放音频文件——play命令是sox工具包里的一个命令，要正确播放，还要安装mp3格式支持：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install libsox-fmt-mp3
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
之所以标题是 &lt;b&gt;伪语音合成&lt;/b&gt; ，就是因为我这里只是单纯地下载了对应的音频文件进行播放而已……真正的语音合成的工作都是Google做的。
&lt;/p&gt;

&lt;p&gt;
另外，这个脚本里的t2s函数只对英文语句起作用，所以下一步我想写一个功能更丰富的脚本，能处理中英文。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>基于Node.js的博客平台Ghost试用</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/15/node.js-blog-platform-ghost.html"/>
    <id>http://linusp.github.io/2013/10/15/node.js-blog-platform-ghost</id>
    <published>2013-10-15T00:00:00-04:00</published>
    <updated>2013-10-15T00:00:00-04:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Ghost是什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Ghost是一个基于Node.js的博客平台，于昨日(2013/10/14)正式在Github上发布。
&lt;/p&gt;

&lt;p&gt;
Ghost源于John O'Nolan的想法——交互设计师John O'Nolan是WordPress UI组的核心成员。大概一年前，他有感于WordPress越来越脱离博客平台的初衷，变为一个CMS，决定开发新一代的博客平台。
&lt;/p&gt;

&lt;p&gt;
4月29日，项目在KickStarter上募集资金，轰动一时。最后在一个月内筹得近20万英镑。
&lt;/p&gt;

&lt;p&gt;
在Ghost正式发布前就已经有非常多的人在盼望着它出来了。
&lt;/p&gt;

&lt;p&gt;
一位网友是这么评价Ghost的
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
简单简洁, 响应式设计, 支持完全自定义, 免费, 专注博客
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
我的消息比较滞后，今天才得知这个东西——这还是Gmail里收到了Ghost团队的邮件才知道的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;本地安装&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
Ghost的本地安装非常简单。这里以linux平台为例（我才懒得在windows下折腾呢）
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-0-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-0-1&quot;&gt;安装Node.js&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-0-1&quot;&gt;
&lt;p&gt;
到&lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js的官方网站&lt;/a&gt; 上下载Node.js并安装，源码包和二进制包都有，这里就不多嘴了。
&lt;/p&gt;

&lt;p&gt;
确认是否安装了Node.js，在终端里运行：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
node -v
&lt;/pre&gt;
&lt;p&gt;
和
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
npm -v
&lt;/pre&gt;
&lt;p&gt;
看看，如果有显示版本信息就说明安装好了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-0-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-0-2&quot;&gt;安装并运行Ghost&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-0-2&quot;&gt;
&lt;p&gt;
不得不说安装真的是非常简单，先到&lt;a href=&quot;http://ghost.org&quot;&gt;Ghost的官网&lt;/a&gt; 上下载Ghost并解压到本地目录，进入到目录下后执行
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
npm install --production
&lt;/pre&gt;
&lt;p&gt;
就OK了。
&lt;/p&gt;

&lt;p&gt;
安装好后就可以执行
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
npm start
&lt;/pre&gt;
&lt;p&gt;
在本地的2368端口运行Ghost了。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://docs.ghost.org/installation/linux/&quot;&gt;这里&lt;/a&gt; 是官方给出的安装文档，当然比我这里说的要详细一点，不过也没差了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;使用&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
先说博客真正要能运行起来需要的环境吧。
&lt;/p&gt;

&lt;p&gt;
基本上来说有两种方案吧：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用提供Ghost应用的云服务，官方给出了Bitnami、Rackspace deployments和DigitalOcean Droplet三个建议的选择。
&lt;/li&gt;

&lt;li&gt;使用允许用户安装Node.js或者已经安装了Node.js的主机服务。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-0-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-0-1&quot;&gt;博客设置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-0-1&quot;&gt;
&lt;p&gt;
在博客的根目录后面加上 &lt;i&gt;ghost&lt;/i&gt; 就可以进入到后台面板。如图所示：
&lt;/p&gt;

&lt;img src=&quot;/assets/img/2013-10-15-ghost-panel.png&quot;/&gt;

&lt;p&gt;
能够设置博客标题、描述、每页文章数等常见参数。
&lt;/p&gt;

&lt;p&gt;
总的来说在设置上的确非常简洁。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-0-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-0-2&quot;&gt;博客主题&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-0-2&quot;&gt;
&lt;p&gt;
目前来说Ghost官方提供了12个主题可供使用，这里是&lt;a href=&quot;http://marketplace.ghost.org/&quot;&gt;链接&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
主题的安装也很简单，将下载好的主题解压后放置到/content/themes/这个目录下，并重启Ghost，然后到后台面板上选择要使用的主题即可。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-0-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-0-3&quot;&gt;编写文章&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-0-3&quot;&gt;
&lt;p&gt;
在上面的那张有关博客设置的图里，可以看到后台面板有三个标签页，分别是： content， new posst和 settings。
&lt;/p&gt;

&lt;p&gt;
第一个可以查看文章列表，并进行修改、删除等操作。
&lt;/p&gt;

&lt;p&gt;
点击第二个就可以编写文章啦。
&lt;/p&gt;

&lt;p&gt;
不得不说，Ghost在文章编写上做的真是太棒了。看下面这个图：
&lt;/p&gt;

&lt;img src=&quot;/assets/img/2013-10-15-writing.png&quot;/&gt;
&lt;p&gt;
可以右键，选择“在新标签页打开图片”看大图。
&lt;/p&gt;

&lt;p&gt;
正如你所见，Ghost提供这种“可视化”的编辑方式。左栏是Markdown语法的文章编辑区，右栏则可以实时预览文章显示效果，实在是太棒了。
&lt;/p&gt;

&lt;p&gt;
除此以外，也可以用自己喜爱的编辑器编辑md文件啦，不过既然Ghost提供了这样一种方式，相信这样做的人就会更少啦。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
确实很不错，特别是那个文章编辑方式，实在是很吸引人，不过——不能在Github Pages上跑，对我来说，吸引力就下降了，而且，虽然刚才说那个编辑方式很吸引人，不过我可是org-mode脑残粉，更何况前两天装上了real-auto-save这个插件，再也不用自己频繁按 &lt;b&gt;C-x C-f&lt;/b&gt; 了。
&lt;/p&gt;

&lt;p&gt;
所以说都是浮云。
&lt;/p&gt;

&lt;p&gt;
来，这是一个demo的展示——本地的只能截图了：
&lt;/p&gt;
&lt;img src=&quot;/assets/img/2013-10-15-ghost-demo.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;
可以右键，选择“在新标签页打开图片”看大图。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>在Github Pages博客内容中插入liquid语句示例</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/14/liquid-in-post.html"/>
    <id>http://linusp.github.io/2013/10/14/liquid-in-post</id>
    <published>2013-10-14T00:00:00-04:00</published>
    <updated>2013-10-14T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
由于Github Pages在后端使用jekyll来处理博客文件，对于文章内部插入的原本用来做示例的liquid语句，会被它解析而不是展示原本的内容，比如说，我在文中插入这样的示例(org-mode)：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+begin_example
{% for post in site.posts %}
{{ post.title }}
{% endfor %}
#+end_example
&lt;/pre&gt;
&lt;p&gt;
最后得到的内容却会是这样的：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;

在Org-mode中显示特殊字符

(2014年1月)月底小结

排序算法——堆排序

排序算法——归并排序

排序算法——快速排序

使用ox-freemind将org-mode文档导出成思维导图

完成机器学习公开课第一部分练习

修改键位+使用smex，告别Emacs小指综合症

年末总结

Ghost.org开启博客托管服务

org-mode导出项目时发布所有文件而不只是被修改的文件

开始学习一些东西

开始在电脑上写日记

朋友要结婚了

通俗化解释GFW工作原理

在Heroku上部署Tornado应用

国内外图床及其对比

Symbol t may not be buffer-local问题

org-mode 8.x导出html时代码块不高亮问题

org-remember从org-mode中移除

月底小结

《ANSI Common Lisp》第三章习题

《ANSI Common Lisp》第二章习题

丧心病狂:用Emacs阅读PDF文档

在Linux系统中屏蔽独立显卡

博客拆分完成

伪语音合成(2)

博客分拆计划

伪语音合成(1)

基于Node.js的博客平台Ghost试用

在Github Pages博客内容中插入liquid语句示例

更换博客主题

论信息自由

使用elisp编写脚本

一年

博客平台writings.io即将关闭

简洁、轻便——静态博客写作方案

使用Github Pages服务建立个人博客

第一篇博客

&lt;/pre&gt;
&lt;p&gt;
这显然不是我们想要的，解决办法也很简单，那就是在每一个liquid语句前后用
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% raw %}
&lt;/pre&gt;
&lt;p&gt;
和
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% endraw %}
&lt;/pre&gt;
&lt;p&gt;
包裹起来，这样liquid模板引擎会将内部的文本作为普通文本处理而不是按照liquid语法去解析它，下面是正确的示例：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+begin_example
{% raw %}{% for post in site.posts %}{% endraw %}
{% raw %}{{ post.title }}{% endraw %}
{% raw %}{% endfor%}{% endraw %}
#+end_example
&lt;/pre&gt;
&lt;p&gt;
就能够得到这样正确的示例结果：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% for post in site.posts %}
{{ post.title }}
{% endfor %}
&lt;/pre&gt;

&lt;p&gt;
不过，还没完呢，比如说，像
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% raw %}
&lt;/pre&gt;
&lt;p&gt;
这样的标签，又怎么在文中显示呢？用刚才说的方法是不行的，不信试试在文中直接这样写
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% raw %}
{% raw %}
{% endraw %}
&lt;/pre&gt;
&lt;p&gt;
本地运行
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;jekyll build
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
试试，没错，会得到一个错误。下面的写法同样会得到错误。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% raw %}
{% endraw %}
{% endraw %}
&lt;/pre&gt;
&lt;p&gt;
究其原因，应该是liquid的 &lt;b&gt;raw/endraw&lt;/b&gt; 标签在匹配时按照就近原则吧——这个是我推测的。
&lt;/p&gt;

&lt;p&gt;
最后我在Stack Overflow上找到了一个&lt;a href=&quot;http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags&quot;&gt;解决方案&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
像这样：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{{ &quot;{% raw &quot; }}%}
&lt;/pre&gt;
&lt;p&gt;
就可以得到：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
{% raw %}
&lt;/pre&gt;
&lt;p&gt;
的显示效果。
&lt;/p&gt;

&lt;p&gt;
也就是说，把 &lt;b&gt;{%&lt;/b&gt; 和 &lt;b&gt;%}&lt;/b&gt; 这一对标签的开闭符号分开了，一部分用双引号括起来并用 &lt;b&gt;{{和}}&lt;/b&gt; 包裹起来，另一部分则按照平常的方式书写。同样的， &lt;b&gt;{{&lt;/b&gt; 和 &lt;b&gt;}}&lt;/b&gt; 也可以通过这种方式来处理。本文第五个示例就是这么得到的。
&lt;/p&gt;

&lt;p&gt;
自己动手试一试吧！
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>更换博客主题</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/13/change-theme.html"/>
    <id>http://linusp.github.io/2013/10/13/change-theme</id>
    <published>2013-10-13T00:00:00-04:00</published>
    <updated>2013-10-13T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
今天更换了主题，其实就是jekyll-bootstrap的 &lt;b&gt;twitter主题&lt;/b&gt; 。
&lt;/p&gt;

&lt;p&gt;
对于&lt;i&gt;Pizn&lt;/i&gt; 设计的主题 &lt;b&gt;The One&lt;/b&gt; ，我不能说不好，只是还是不太符合我的喜好，我这段时间花了大量的时间想自己写一个 &lt;b&gt;极致简洁&lt;/b&gt; 的模板，比如说&lt;a href=&quot;http://liutos.github.io&quot;&gt;Liutos的博客&lt;/a&gt; 这样的风格，不过web知识太过匮乏，全凭自己在&lt;a href=&quot;http://www.w3school.com.cn/&quot;&gt;w3school在线教程&lt;/a&gt; 上对HTML/CSS 得到的丁点了解，而没有前端设计的理念，完全就是乱来（我自己倒是搞了个比较简单的模板出来，但是太丑了（╯‵□′）╯︵┴─┴ ）。
&lt;/p&gt;

&lt;p&gt;
之前我试用jekyll-bootstrap时它不能处理\_posts/目录下的html文件，这是我当时放弃它的主要原因——我可不想写markdown，今天一试居然可以了……我一定是记错了什么……
&lt;/p&gt;

&lt;p&gt;
不过我也没有把jekyll-bootstrap全部都拿过来用，而是把twitter主题的模板直接放到了\_layouts目录下，顺便也修改了一下css。
&lt;/p&gt;

&lt;p&gt;
还有，jekyll-bootstrap的twitter主题有一个问题，它的模板 &lt;b&gt;page.html&lt;/b&gt; 和 &lt;b&gt;post.html&lt;/b&gt; 中，本应显示页面/文章 标签的地方，一直显示的是 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Supporting tagline
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
这是因为模板中的相应地方作者遗忘了一处细节，请看这段代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;page-header&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;h1&lt;/span&gt;&amp;gt;更换博客主题 &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;small&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #bebebe; background-color: #1c1c1c;&quot;&gt;Supporting tagline&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;small&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
其中 &lt;b&gt;small&lt;/b&gt; 标签内部应该修改为

{{ page.tagline }}

&lt;/p&gt;

&lt;p&gt;
还有一个小问题是，模板的首页文件即 &lt;b&gt;index.md&lt;/b&gt; 设置了一个title为 &lt;b&gt;Hello World&lt;/b&gt; ，而由于 &lt;b&gt;default.html&lt;/b&gt; 这个模板将页面文件的tile设置为博客页面的title，这就有一个问题了。index.md生成的index.html会渲染为博客的首页，也就是说，博客首页的标题会被设置为index.md中指定的title，按照常理，首页的页面标题应该是和博客的标题一致的。接下来就有两种情况：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;将index.md中的title设置为博客标题，但这样和导航栏中的博客标题重复了，看起来有点多余
&lt;/li&gt;
&lt;li&gt;将index.md中的title设置为非博客标题的内容，这样就和刚才说的 &lt;b&gt;常理&lt;/b&gt; 不符
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
我的做法是：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;修改default.html

&lt;p&gt;
将以下内容
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;{{ page.title }}&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;title&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
修改为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt; &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;title&lt;/span&gt;&amp;gt;
&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;   {% if page.title %}&lt;/span&gt;
&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;   {{ page.title }}&lt;/span&gt;
&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;   {% else %}&lt;/span&gt;
&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;   {{ site.title }}&lt;/span&gt;
&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;   {% endif %}&lt;/span&gt;
&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;title&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;修改index.md

&lt;p&gt;
删除其title，修改其模板为 default，在头部添加：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;page-header&quot;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;h1&lt;/span&gt;&amp;gt;&amp;#25991;&amp;#31456;&amp;#21015;&amp;#34920; &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;small&lt;/span&gt;&amp;gt;&lt;span style=&quot;color: #bebebe; background-color: #1c1c1c;&quot;&gt;{{ page.tagline }}&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;small&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
要不要跟作者提提意见呢？嘿嘿
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>论信息自由</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/10/free-in-internet-time.html"/>
    <id>http://linusp.github.io/2013/10/10/free-in-internet-time</id>
    <published>2013-10-10T00:00:00-04:00</published>
    <updated>2013-10-10T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
今年夏天我有了我的智能手机，仅仅是一台799价格的安卓手机而已。一度我为和大家一样能有一台智能设备而高兴，尝试着各种应用和游戏。但到今天我变得很担忧。
&lt;/p&gt;

&lt;p&gt;
手机依赖这种东西我就不说了，都是说烂了的话题。
&lt;/p&gt;

&lt;p&gt;
我这个人对个人的信息安全比较敏感，而且也有点强迫症。自从我第一次安装应用看到提示里的一堆权限后我就有点在意，这两天我得知一个名为 &lt;b&gt;LBE安全大师&lt;/b&gt; 的应用可以管理手机应用的权限，于是就安装了并且对所有应用都进行了设置。这些游戏和应用拥有的涉及个人隐私的权限有：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;短信记录

&lt;p&gt;
访问您的 &lt;b&gt;短信收件箱&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;联系人记录

&lt;p&gt;
访问您的 &lt;b&gt;联系人&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通话记录

&lt;p&gt;
访问您的 &lt;b&gt;通话记录&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;定位

&lt;p&gt;
通过网络或卫星对您的手机 &lt;b&gt;定位&lt;/b&gt; 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;手机识别码

&lt;p&gt;
获得您的手机识别码，包括IMEI、IMSI、 &lt;b&gt;本机号码&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;拍照和录音

&lt;p&gt;
拍照和 &lt;b&gt;录音&lt;/b&gt; 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;系统设置

&lt;p&gt;
修改系统设置
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;发送短信

&lt;p&gt;
&lt;b&gt;直接&lt;/b&gt; 发送短信
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;电话

&lt;p&gt;
拨打、接听或挂断电话号码
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通话状态

&lt;p&gt;
获取手机来电、通话、挂断等状态
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通话监听

&lt;p&gt;
&lt;b&gt;监听通话内容&lt;/b&gt; 、控制音量等
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
我把我手机上的应用及其权限情况做了一张表（为了方便显示，这里用数字代表上面罗列的相对应的权限）
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption align=&quot;above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;&amp;#34920;1&amp;nbsp;&lt;/span&gt; 本人手机应用权限标表&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;1&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;2&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;3&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;4&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;5&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;6&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;7&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;8&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;9&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;10&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;11&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;7x7&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;安智市场&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;安桌壁纸&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;百度贴吧&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;哔哩哔哩动画&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;布卡漫画&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;海词词典&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;超级蓝牙分享&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;今日头条&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;美乐时光&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;拇指玩&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;史上最牛的游戏2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;手机云&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;书旗免费小说&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;搜狗输入法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;拓词&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;天翼锁屏\_扫一扫&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;豌豆荚&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;网易公开课&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;我要早睡&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;微信&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;虾米音乐&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;相机360&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;小小盗贼&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;新浪公开课&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;印象笔记&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;优酷&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;游戏存档&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;自动启动清理&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;自动运行管理&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;A Ride&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Anyview&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Annine Taste&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Dropbox&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Flipboard&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Labyrinth&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;LBE安全大师&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;NewsZeit&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;QQ&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Reddit News&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;TinyFarm&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Trollface Quest&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;UC浏览器&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;WiFi连接管理器&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;✔&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
可以看到，大部分应用都有 &lt;b&gt;定位&lt;/b&gt; 和 &lt;b&gt;手机识别码&lt;/b&gt; 这两个权限，而其实大部分应用根本就不应该有这个权限。更为严重的是，有几款应用具备 &lt;b&gt;通话监听&lt;/b&gt; 的权限，这些应用包括：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;百度贴吧
&lt;/li&gt;
&lt;li&gt;微信
&lt;/li&gt;
&lt;li&gt;虾米音乐
&lt;/li&gt;
&lt;li&gt;QQ
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
先不说别的，表中的 &lt;b&gt;手机云&lt;/b&gt; 应用是我的手机预装的一个应用，貌似也叫做 &lt;b&gt;天翼云桌面&lt;/b&gt; ，它有很多权限，可即使这样，它也没有 &lt;b&gt;通话监听&lt;/b&gt; 这一项权限。试问 &lt;b&gt;虾米音乐&lt;/b&gt; 这样一款应用，它要监听用户通话内容做什么呢？
&lt;/p&gt;

&lt;p&gt;
我说过我对个人信息安全比较敏感，于是我把上述应用的这些权限几乎全部关闭了，但是 &lt;b&gt;LBE安全大师&lt;/b&gt; 又真的信得过么？我真的不知道。
&lt;/p&gt;

&lt;p&gt;
让我下定决心写这篇文章是因为我今天实在是被烦得不行了。先是 &lt;b&gt;新浪微博&lt;/b&gt; 不停地尝试获取我的手机号码， LBE安全大师不停地在通知栏提示：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
拒绝新浪微薄获取本机号码
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
忍无可忍，于是我就把它卸载了，这就是表格里没有它的原因。然后是百度贴吧不停地尝试修改系统设置，LBE频繁提示：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
拒绝百度贴吧修改系统设置
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
最后，是我在豌豆荚上安装应用的时候，它给我推荐了一个应用： &lt;b&gt;华中大校园通&lt;/b&gt; 。它怎么知道我在哪个大学学习过？我并没有下载过相关的应用，刚下载的应用也和它推荐的应用无关，那只有一种解释，它通过我的社会关系获知我极有可能是该大学的学生。这些社会关系的获取途径可能有：手机通讯录、短信记录、通话记录、QQ好友。
&lt;/p&gt;

&lt;p&gt;
CCNIC《第30次中国互联网发展状况统计报告》显示，到2012年上半年，通过手机接入互联网的网民数量达到3.88亿，手机已经超越台式电脑成为第一大上网终端。而手机作为个人通讯工具，其中包含的个人隐私信息要比计算机多得多——注意，我这里说的是 &lt;b&gt;个人&lt;/b&gt; 。而且，电脑上的软件权限更好管理，不说linux，就说windows，至少也有UAC和防火墙在起作用，不像智能手机上，很多应用竟然默认就拥有了极其高的权限。更不说现在刷机成风，如果被某些目的不良的应用得到了root权限，后果不堪设想——安智市场和豌豆荚就会尝试获取root权限——对linux有所了解的人都明白root是什么概念，那是最后的底线。
&lt;/p&gt;

&lt;p&gt;
现在还只是智能手机，随着现在正在兴起的可穿戴设备以及即将到来的物联网时代的成熟，网络上会充斥着更多的个人信息，那时候的应用/服务提供方将会获得更为丰富庞大的个人信息，这些信息将不仅仅包括用户的姓名、年龄、性别、手机号码、社会关系，可能还会有身体信息、家庭住址、饮食起居习惯、行为模式，甚至更远一点，还可能会有指纹、声纹、瞳孔、DNA这些信息。
&lt;/p&gt;

&lt;p&gt;
这些互联网公司毫不掩饰地从智能终端上获取用户的身份、手机号码、位置、喜好等信息，用以为盈利准备数据。从某种程度上来说，我们已经渐渐地受控于这些互联网公司，目前它们只是为了盈利，所以它们控制我们的信息用以盈利，但如果政府或不法分子获取这些信息——不，就算这些信息不被用于其他途径，这种行径也不能忍受。
&lt;/p&gt;

&lt;p&gt;
信息的不对称将会导致新的阶级分化，每个人都应该有掌握自己信息自由的权利。
&lt;/p&gt;

&lt;p&gt;
我决定了，我必须进行网络安全知识的系统学习。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>使用elisp编写脚本</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/09/script-with-emacs-lisp.html"/>
    <id>http://linusp.github.io/2013/10/09/script-with-emacs-lisp</id>
    <published>2013-10-09T00:00:00-04:00</published>
    <updated>2013-10-09T00:00:00-04:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;起因&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
我通过Github Pages有了自己的一个静态博客，并且开始正儿八经地写博客。
&lt;/p&gt;

&lt;p&gt;
但我碰到了一个问题：每次我需要写博客，我要先打开emacs，按下C-x C-f，然后输入一长串路径名和文件名(org文件)，然后手动输入YAML Front Matter&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。路径名每次都是一样的，YAML Front Matter也是一样的，这都是重复性的工作，并且我又是一个很懒的人，所以我就想偷懒了。
&lt;/p&gt;

&lt;p&gt;
起初是想写个shell脚本来简化步骤而已，开始写脚本后，我就想，应该把publish的步骤也通过脚本进行简化(虽然这并不是很复杂的步骤)，然后我发现shell不能做到这一点，唯一的选择是elisp。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
用elisp写脚本？这事我听说过，但我没做过，也就是说我也是大姑娘上轿头一回了。
&lt;/p&gt;

&lt;p&gt;
照例google。
&lt;/p&gt;

&lt;p&gt;
基本形式没太大问题，将shell脚本Shebang&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; name=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;后面的 &lt;b&gt;/bin/bash&lt;/b&gt; 改成 &lt;b&gt;/usr/bin/emacs &amp;#x2013;script&lt;/b&gt; ，其他的东西嘛，随便就行不是么？（想当年某次实习招聘的时候我跟面试官说我会shell脚本，结果只会堆命令的真相还是被不留情面地揭穿了（╯‵□′）╯︵┴─┴ ）
&lt;/p&gt;

&lt;p&gt;
不过碰到了不少问题。
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;之所以用elisp，就是想简化publish么，但是在elisp script里写上的
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(org-publish-project &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;blog-linusp&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
完全不起作用。细想一下应该是shell脚本没有加载我的emacs相关配置。当时真是一筹莫展啊，后来发现其实这是一件不复杂的事情，在之前加上一句
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(load-file &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/.emacs&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
不过这样做太凶残了，什么auto-complete、yasnippet、slime、org2blog、metablog全被加载了（╯‵□′）╯︵┴─┴ 。
&lt;/p&gt;

&lt;p&gt;
好在我有将配置文件分类的习惯，org-mode的相关配置被我写在一个名为 &lt;b&gt;org.el&lt;/b&gt; 的文件里，于是加载它就OK了，不过这个文件里还有引用其他的一些emacs插件，于是也都加载了——好吧至少比之前更好是吧。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如何传递参数给脚本？shell脚本接受参数的话还是懂的怎么做的，可是elisp脚本……

&lt;p&gt;
照例google，然后发现Xah Lee&lt;sup&gt;&lt;a id=&quot;fnr.3&quot; name=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;的博客上就有这个内容，原文点&lt;a href=&quot;http://ergoemacs.org/emacs/elisp_command_line_argv.html&quot;&gt;我&lt;/a&gt;。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;运行脚本后，发现总会有一堆的Loading message，就像下面这样：
&lt;img src=&quot;/assets/img/2013-10-09-loading-message.png&quot; /&gt;

&lt;p&gt;
（╯‵□′）╯︵┴─┴ 
&lt;/p&gt;

&lt;p&gt;
经google，该问题没有太好的解决问题，凑合吧。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;成果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
嘛，虽然代码写得比较丑陋，至少能用，功能上达到了我的预期目标，所以代码的问题，以后再说吧。
&lt;/p&gt;

&lt;p&gt;
附脚本代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;#!/usr/bin/emacs --script

(&lt;span style=&quot;color: #cf4a44;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;color: #bebebe;&quot;&gt;calendar&lt;/span&gt;)
(&lt;span style=&quot;color: #cf4a44;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #ed8a0c;&quot;&gt;blog&lt;/span&gt; (action &lt;span style=&quot;color: #ca34e2;&quot;&gt;&amp;amp;rest&lt;/span&gt; rst)
  (&lt;span style=&quot;color: #cf4a44;&quot;&gt;cond&lt;/span&gt; ((string-equal action &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;post&quot;&lt;/span&gt;)
     (&lt;span style=&quot;color: #cf4a44;&quot;&gt;if&lt;/span&gt; (equal rst nil)
         (print &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Please input title&quot;&lt;/span&gt;)
       (&lt;span style=&quot;color: #cf4a44;&quot;&gt;let&lt;/span&gt; ((post-file (concat (format-time-string &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;)
                     &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;-&quot;&lt;/span&gt;
                     (car rst)
                     &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;.org&quot;&lt;/span&gt;)))
         (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt;
           (&lt;span style=&quot;color: #cf4a44;&quot;&gt;with-temp-file&lt;/span&gt; (concat &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/org/_posts/&quot;&lt;/span&gt;
                       post-file)
         (insert (concat &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;#+begin_html\n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;---\n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;layout     : post\n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;title      : \n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;categories : \n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;tags       : \n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;excerpt    : \n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;---\n&quot;&lt;/span&gt;
                 &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;#+end_html\n&quot;&lt;/span&gt;)))
           (print (format &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Create post file %s in post directory&quot;&lt;/span&gt; post-file))
           (shell-command (concat &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;emacs &quot;&lt;/span&gt;
                      &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/org/_posts/&quot;&lt;/span&gt;
                      post-file))))))
     ((string-equal action &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;publish&quot;&lt;/span&gt;)
      (&lt;span style=&quot;color: #cf4a44;&quot;&gt;progn&lt;/span&gt;&lt;span style=&quot;color: #a07f41; background-color: #073642;&quot;&gt; &lt;/span&gt;
        (org-publish-project &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;blog-linusp&quot;&lt;/span&gt;)
        (print &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Project has been published!&quot;&lt;/span&gt;)))
    (t (print &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;Action: post/publish&quot;&lt;/span&gt;))))

(load-file &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/.emacs.d/site-lisp/xml-rpc.el&quot;&lt;/span&gt;)
(load-file &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/.emacs.d/site-lisp/wc-mode.el&quot;&lt;/span&gt;)
(load-file &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/.emacs.d/myplugins/org.el&quot;&lt;/span&gt;)

(blog (elt argv 0) (elt argv 1))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;&amp;#33050;&amp;#27880;: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
&lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;YAML Front Matter&lt;/a&gt;是用来告诉Jekyll使用什么模板并可以附带一些其他信息的文件头
&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; name=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
Shebang是一个由'#'和'!'构成的字符串，在文件中存在Shebang的情况下，类Unix操作系统的程序载入器会分析Shebang后的内容，将这些内容作为解释器指令，并调用该指令，并将载有Shebang的文件路径作为该解释器的参数——来自&lt;a href=&quot;http://zh.wikipedia.org/wiki/Shebang&quot;&gt;维基百科&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; name=&quot;fn.3&quot; class=&quot;footnum&quot; href=&quot;#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
Xah Lee是一位emacs大牛，emacs wiki上可是都有他的专门的页面哦
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>一年</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/10/07/one-year.html"/>
    <id>http://linusp.github.io/2013/10/07/one-year</id>
    <published>2013-10-07T15:55:00-04:00</published>
    <updated>2013-10-07T15:55:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
今天是2013年国庆长假的最后一天。
&lt;/p&gt;

&lt;p&gt;
去年的今天，我完成了求职的准备工作：复习了诸多算法细节，重新熟悉了linux系统的常用命令，对C/C++的语法细节进行了查漏补缺。在国庆期间，我也了解了很多互联网公司的招聘动态，满怀激情的准备接受应聘的挫折和失败，以及终将与我相逢的工作offer。
&lt;/p&gt;

&lt;p&gt;
最后，我确实拿到了工作offer，不多，就两个；不够好，工资不高，公司知名度也一般。但我很满足，我满足于在那期间的奔波与劳累、期待与失望，满足于与首长在食堂吃饭还在讨论算法细节、躺到床上辗转难眠的日子。
&lt;/p&gt;

&lt;p&gt;
我时常想象着真正工作的日子：做一个苦逼的程序员，时常加班，住在一间小而整洁的屋子里，有自己的书架，摆在靠窗的位置，旁边放着一把舒适的椅子，周末的时候可以小资地喝着热咖啡读着世界名著。
&lt;/p&gt;

&lt;p&gt;
事实上是，我现在在家里，没有工作——说“辞了工作”更准确一点，整天都没有事情，可以做的就是定时吃饭、定时喂养鸡鸭、定时吃药、不定时地刷公务员考试的题目、有事没事抽出手机刷 &lt;b&gt;今日头条&lt;/b&gt; （一个Android上的新闻APP）。
&lt;/p&gt;

&lt;p&gt;
可怕的不是我的身体状况或者我的无业状态，而是我的“啊，就这样认了吧”的心态。
&lt;/p&gt;

&lt;p&gt;
当然情绪上我偶尔还会有反弹，内心深处肯定还有不甘，写的小说里也满是负面情绪。
&lt;/p&gt;

&lt;p&gt;
一年时间，变化如此之大。
&lt;/p&gt;

&lt;p&gt;
明年的时候我又会是什么样子？
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>博客平台writings.io即将关闭</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/09/30/writings-io.html"/>
    <id>http://linusp.github.io/2013/09/30/writings-io</id>
    <published>2013-09-30T00:00:00-04:00</published>
    <updated>2013-09-30T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
打开gmail邮箱，发现了一封邮件：
&lt;/p&gt;
&lt;img src=&quot;/assets/img/2013-09-30-mail.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;
于是赶紧去writings.io的博客上去看看怎么回事。
&lt;/p&gt;

&lt;p&gt;
作者在&lt;a href=&quot;http://blog.chloerei.com/articles/79-writings-io-is-failure&quot;&gt;Writings.io 失败了&lt;/a&gt; 这篇文章里说了几点理由，其中最重要的一个应该是：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
不足以成为商业模式
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
这一点吧，说到底是没有钱干下去了。
&lt;/p&gt;

&lt;p&gt;
其实我挺喜欢writings.io这个平台的，虽然我压根就没用过，只是在了解jekyll的时候去了解了其他一些静态博客平台的时候知道了writings.io并且注册了一个帐号。简洁、干净，这是我对writings.io的印象，也是我评判博客平台的一个重要标准（说的好像自己对博客平台有多了解一样）。
&lt;/p&gt;

&lt;p&gt;
挺可惜的。
&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>简洁、轻便——静态博客写作方案</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/09/30/static-blog-way.html"/>
    <id>http://linusp.github.io/2013/09/30/static-blog-way</id>
    <published>2013-09-30T00:00:00-04:00</published>
    <updated>2013-09-30T00:00:00-04:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;静态博客写作的优势&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
纯静态博客写作有以下优势：  
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;响应速度快（访问时）

&lt;p&gt;
博客站点页面都是静态页面，访问时不需要查询数据库，因此自然就能够有较好的响应速度。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;最大限度的控制

&lt;p&gt;
对于大部分静态博客写作方案而言，网站的每一个实现细节都是可以由自己来调整掌控的，这样虽然带来了一定的技术难度，但一来流行的解决方案在网上都有许多可用的模板，二来网站的可定制性非常高。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;更好的写作体验

&lt;p&gt;
在解决了网站的外观后，就可以体验静态博客写作的最大好处了。常见的静态博客写作方案都支持在本地编写文章，这样的优势是可以自行选用最合适最顺手的编辑器，而不是那些常见博客平台上简陋的在线编辑器。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;更加方便进行备份

&lt;p&gt;
静态博客写作方案都支持本地编写文章（甚至有的解决方案只能在本地编写文章），这样的好处是我们可以在本地有所有自己文章的一个备份，只要小心地使用你的计算机，这些数据就能够得到很好的保护，不放心的话还可以使用Dropbox之类的工具进行进一步的备份。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;省钱

&lt;p&gt;
我不是开玩笑的，待会你就知道了。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;解决方案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
大致有三种解决方案，且看我一一道来。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;自购主机方案&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
如果能够有条件购买主机空间，那么这是最理想的。试想一下，都有自己的主机空间了，想怎么折腾不行是不？想用Wordpress就用Wordpress，想自己写html就自己写html。这种情况下如果还是想构建静态博客，参看下一个解决方案。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Github Pages&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
Github Pages的介绍以及使用它来建立个人博客的内容可以看我之前的一篇文章&lt;a href=&quot;http://linusp.github.io/2013/09/14/blogging-with-jekyll-emacs.html&quot;&gt;使用Github Pages服务建立个人博客&lt;/a&gt; 。使用Github Pages的好处是不用花钱购买自己的主机空间，这后面的Dropbox方案同样如此。
&lt;/p&gt;

&lt;p&gt;
说到Github Pages，大部分人对其有所了解的人可能会第一时间联想到Jekyll。没错，Github Pages是在后端使用Jekyll来生成我们的静态博客，但我们在本地并不是只有Jekyll一个选择。
&lt;/p&gt;

&lt;p&gt;
Jekyll是一个静态博客生成器，事实上还有很多其他静态博客生成器供我们选择——它们和Github Pages合作得很好，因为其中的一些就是为了和Github Pages适配而开发出来的。
&lt;/p&gt;

&lt;p&gt;
此外还包括了一些基于某些静态博客生成器的框架也可以使用。
&lt;/p&gt;

&lt;p&gt;
这里列举一些比较流行的静态博客生成器或者静态博客框架：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Jekyll

&lt;p&gt;
Github Pages官方推荐产品，依赖ruby。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Jekyll-bootstrap

&lt;p&gt;
基于Jekyll的框架，提供了几种现成的外观主题。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;OctoPress

&lt;p&gt;
基于Jekyll的框架，只用过短短几天时间，不予置评。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;hexo

&lt;p&gt;
由Node.js驱动的博客框架，功能强大、使用简单。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Pelican

&lt;p&gt;
Python编写的静态博客生成器，对Python有爱的人不妨一用。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;OpooPress

&lt;p&gt;
一个基于Java 的可用于博客的静态网站生成器。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
以上所有方案都支持Markdown语法。
&lt;/p&gt;

&lt;p&gt;
注：新兴的国内代码托管平台&lt;a href=&quot;https://gitcafe.com&quot;&gt;Gitcafe&lt;/a&gt; 现在也提供 &lt;b&gt;Pages&lt;/b&gt; 服务了，用同样的方法也可以在Gitcafe上搭建静态网站，&lt;a href=&quot;http://linusp.gitcafe.com&quot;&gt;这是&lt;/a&gt; 我在Gitcafe上搭建的笔记网站(2013-12-24更新)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;Dropbox App&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
DropBox 是一款非常优秀的免费网络文件同步工具，它有以下几个优点：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;全平台支持
&lt;/li&gt;
&lt;li&gt;稳定，不用担心宕机
&lt;/li&gt;
&lt;li&gt;第三方应用丰富
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
前两个特点是对于现在的云存储服务来说并无特殊之处，Dropbox的强大之处就在于第三点。这里有一篇&lt;a href=&quot;http://wangyueblog.com/2012/03/07/dropbox/&quot;&gt;文章&lt;/a&gt; 讲述了Dropbox的“另类”功用。
&lt;/p&gt;

&lt;p&gt;
文中第一条就是
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
使用Dropbox搭建一个网站或博客
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
没错，我们要的就是这个。
&lt;/p&gt;

&lt;p&gt;
以下应用可以用于和Dropbox一起来搭建个人博客：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Scriptogr.am

&lt;p&gt;
我尝试了一下Scriptogr.am，这里是我用它搭建的&lt;a href=&quot;http://scriptogr.am/zix&quot;&gt;博客&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
Scriptogr.am只要求用户编写Markdown格式的文章即可，除了通用的在本地编写文章外，Scriptogr.am还提供了一个非常简洁的后台管理界面，在那里可以管理文章、编写文章，此外还能修改网站的css和html源代码。
&lt;/p&gt;
&lt;img src=&quot;/assets/img/2013-09-30-scriptogr-am.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;
网站的默认外观干净、清爽，不过除了首页外，只有一个Archive页面，可能稍显美中不足。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;DropPages

&lt;p&gt;
DropPages不同于Scriptogr.am，它会将网站的构成细节交由用户，用户可以自由地修改网站布局、外观等等，默认提供一个可用的主题，不过说实话，我不知道它用的是什么模板语言。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;site44

&lt;p&gt;
site44和DropPages类似，但也有不同之处，DropPages生成的应用目录下并不是网站的完整结构，而是一些用户可以修改的文件；site44则不一样，它将对应的应用目录下的文件作为网站来进行发布，相对来说site44的自由度更高一些——此外，site44默认只有一个index.html，所以要想有一个功能完整、丰富的博客，还得下点功夫，可以考虑用之前提到的静态博客生成器来做这件事情。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://linusp.site44.com&quot;&gt;这里&lt;/a&gt; 是我用site44这个应用配合Dropbox搭建的一个个人网站(请不要太在意内容)。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;FarBox

&lt;p&gt;
FarBox也是一款受到相关人群喜爱的Dropbox应用，其使用和Scriptogr.am类似，用户只要关心文章的撰写就可以了，至于外观，官方提供六种模板。相对Scriptogr.am来说，FarBox的后台管理功能更为强大，而且支持categories。另外，FarBox不仅可以和Dropbox一起使用，通过Google Drive同样可以利用FarBox进行博客写作。
&lt;/p&gt;

&lt;p&gt;
不知道是Bug还是什么，我在FarBox上写文时，插入的链接不能正常显示，看&lt;a href=&quot;http://linusp1024.farbox.com&quot;&gt;这里&lt;/a&gt; ——我保证我遵守了Markdown的语法。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
事实上相关的Dropbox应用不止上述四个，只不过这四个是比较常用的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;云平台方案&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
云平台即 &lt;b&gt;PaaS&lt;/b&gt; (Platform as a Service)也是一个搭建个人博客的途径。当然，在云平台上搭建个人博客可以不限于静态博客，不过一般云平台的免费服务都有流量以及存储的限制，所以搭建静态博客可以更加有效地利用这些免费的资源。
&lt;/p&gt;

&lt;p&gt;
这里推荐几个云平台：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Heroku

&lt;p&gt;
Heroku的操作非常简洁，而且也是使用git来进行管理，非常方便。
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Openshift
&lt;/li&gt;

&lt;li&gt;Sae/Bae/&amp;#x2026;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
以上几个我只使用过Heroku，不过其他云平台上搭建博客的方法在网上也是非常普遍的，这里就不再细说了。总体来说，在云平台上搭建博客相对复杂一点。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;其他一些话&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
总的来说，可选的解决方案是很多的，选择何种方式就看自己喜好了，不过我想不应该太纠结于形式，一旦选定了一个平台，老实点多写点东西才是正道吧。
&lt;/p&gt;

&lt;p&gt;
完。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>使用Github Pages服务建立个人博客</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/09/14/blogging-with-jekyll-emacs.html"/>
    <id>http://linusp.github.io/2013/09/14/blogging-with-jekyll-emacs</id>
    <published>2013-09-14T00:00:00-04:00</published>
    <updated>2013-09-14T00:00:00-04:00</updated>
    <content type="html">
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;为什么要使用Github Pages来建立个人博客&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
使用什么博客平台取决于个人的需求，因此，并不是所有人都适合使用本文介绍的这种形式，一般来说，追求简洁的一些程序员可能会使用这种方式。
&lt;/p&gt;

&lt;p&gt;
对于有以下需求的人来说，使用Github Pages建立博客是个好主意：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;希望能在本地编写文章
&lt;/li&gt;
&lt;li&gt;追求简洁、轻便
&lt;/li&gt;
&lt;li&gt;不想购买主机空间和域名
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
第一条，本地编写允许文章允许用户选择自己喜欢的编辑器来进行写作，而不是使用博客平台的编辑器——对于我等emacser来说，许多博客平台的编辑器功能实在是有点不够看。著名的博客平台&lt;a href=&quot;http://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; 提供xml-rpc接口，允许用户通过相关软件在本地编写好文章后远程发布。说实话，我还是比较喜欢WordPress的，但它不满足后面三个需求。说到xml-rpc，早些年国内各大博客平台都是支持xml-rpc借口的（如CSDN，ChinaUnix等），但是后来据说是出于安全因素的考虑，似乎有些网站是关闭了这个接口，现在网上的相关搜索结果普遍是四五年前的讨论结果。新浪以前似乎也支持xml-rpc接口，但据我测试现在是无法进行发布了，CSDN貌似也有点问题，应该是关闭了接口。之所以要说xml-rpc，是因为emacs有一个插件org2blog能够通过xml-rpc接口来进行远程发布，顾名思义org2blog是使用org-mode作为major-mode的，熟悉org-mode并且正在使用WordPress的朋友一定会喜欢这个插件，如果需要，可以到这个&lt;a href=&quot;https://Github.com/punchagan/org2blog&quot;&gt;链接&lt;/a&gt; 下载org2blog，此外org2blog依赖xml-rpc.el，点&lt;a href=&quot;http://www.emacswiki.org/emacs/xml-rpc.el&quot;&gt;这里&lt;/a&gt; 可以下载。
&lt;/p&gt;

&lt;p&gt;
第二条，还是说WordPress吧，WordPress是使用php编写的，使用mysql数据库来管理文章。从功能上来说WordPress是非常好的，它提供丰富的主题、插件以及拥有很多用户的论坛（好吧我不是在这里推荐WordPress的，不过我确实挺喜欢WordPress，之前也说过了），与此相对应的，为了完全了解WordPress，用户不得不去学习如何安装它的主题和插件、熟悉选项繁多的后台管理界面。至于国内的一些博客平台，外观暂且不说，一般都带有很多广告，我特别讨厌这一点。
&lt;/p&gt;

&lt;p&gt;
第三条，好吧这是我选择这一条路的主要理由，你懂得，我很穷，没有钱买主机空间和域名（求一个土豪朋友）。为什么我穷？因为我现在待业在家，没有工作——没有工作是因为我把工作辞了在家准备考公务员，至于这后面的故事就很复杂啦，如果有兴趣的话可以发邮件给我和我谈谈心哟。
&lt;/p&gt;

&lt;p&gt;
如果看到这里您对我的观点基本赞同的话，您可以继续读下去，否则我觉得您可以考虑一下WordPress或者其他平台。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Github Pages是什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://Github.com&quot;&gt;Github&lt;/a&gt; 是一个用于使用Git版本控制系统项目的共享虚拟主机服务&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。简单说，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。
&lt;/p&gt;

&lt;img src=&quot;/assets/img/github.png&quot;/&gt;
&lt;/p&gt;

&lt;p&gt;
但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，Github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，Github Pages可以被认为是用户编写的、托管在Github上的静态网页。
&lt;/p&gt;

&lt;p&gt;
Github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。有意思的是，这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。这里的&lt;a href=&quot;http://Jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; 是一个静态站点生成器，它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。它也是Github Pages的后端处理工具。
&lt;/p&gt;

&lt;p&gt;
利用Github Pages的这些特点，我们就可以搭建一个个人的博客——虽然是静态的网站，不过足够了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;环境准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
对于想使用Github Pages服务来建立个人博客的朋友来说，您需要以下环境：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Github帐号
&lt;/li&gt;
&lt;li&gt;配置好的本地git工具
&lt;/li&gt;
&lt;li&gt;markdown编辑器或者其他的编辑器
&lt;/li&gt;
&lt;li&gt;Jekyll(可选)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
前面两个我不想多说，相关的文章太多了，在这里重复那些内容没有什么意义。
&lt;/p&gt;

&lt;p&gt;
特别要说的是，建议使用linux系统，虽然理论上windows也可以使用msysgit来管理，但我不认为那是个好主意，当然如果愿意折腾，就无所谓了。
&lt;/p&gt;

&lt;p&gt;
至于markdown，它的语法简单明了，很快就能上手，因此不要担心这个问题，需要学习的话，可以到Github的首页，按下键盘的 &lt;b&gt;M&lt;/b&gt; 键进行学习。至于编辑器，简单的文本编辑器如gedit、leafpad甚至nano都可以，当然，本人选择使用emacs并且不使用markdown模式而是坚持使用org-mode，感兴趣的可以在文章尾部找到相关的配置以及使用方法。此外一些支持markdown语法的编辑器也是比较好的选择。
&lt;/p&gt;

&lt;p&gt;
最后的Jekyll为什么标注是可选呢？因为我们并不需要对相关的项目仓库做什么特别的事情，我们只需要写文章，然后commit-&amp;gt;push就是了，之所以需要Jekyll，是为了方便本地预览博客以及进行调试。怎么说也要保证自己的网站确实能够运行然后才去让别人阅览吧？总而言之，Jekyll并不是建立博客必须的部分，但它是帮助我们更好地进行管理的工具。
&lt;/p&gt;

&lt;p&gt;
Jekyll的安装：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;&amp;#20197;debian&amp;#31995;linux&amp;#21457;&amp;#34892;&amp;#29256;&amp;#20026;&amp;#20363;&lt;/span&gt;
sudo apt-get install rubygems1.8
gem install jekyll liquid open4 maruku classifier rdiscount
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;方案选择&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
可选的方案有三个：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://Jekyllbootstrap.com/&quot;&gt;Jekyll-Bootstrap&lt;/a&gt; （简称JB-不信自己去看\_includes目录）
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;自己动手丰衣足食
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Jekyll-Bootstrap和Octopress是两个基于Jekyll的博客框架，使用它们能够快速地得到一个基本好看的、能够运行的博客系统，不过还是那个问题，因为已经够用了，所以你不会去关心它们到底干了什么怎么干的，直到你遇到问题。不过它们还是不错的，这是真心话。相对来说我个人比较推荐Jekyll-Bootstrap，因为它在Jekyll的基础上并没有作太大的改变，只是增加了主题和一些配置而已，Octopress干的事就多了。
&lt;/p&gt;

&lt;p&gt;
这里主要说一下第三种方案。
&lt;/p&gt;

&lt;p&gt;
自己动手呢，也分两种情况：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;复用他人的博客模板
&lt;/li&gt;
&lt;li&gt;自行编写每一行网站代码
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
显然第二种情况是如果不是对前端知识足够熟悉是比较困难的。因此复用他人的博客模板是比较好的选择，这里的复用并不是简单的拷贝然后使用（当然你想的话也可以），其他人的博客一般都会有一些细节无法满足自己，所以还需要自己进行修改、定制，这个过程就是意义所在。
&lt;/p&gt;

&lt;p&gt;
这个&lt;a href=&quot;https://Github.com/mojombo/Jekyll/wiki/sites&quot;&gt;页面&lt;/a&gt; 收集了非常多Jekyll博客的链接及其源代码，我比较喜欢codepiano的风格，然后我最初用来学习的是唐九军的博客，唐九军的博客没有使用Jekyll-Bootstrap等其他东西，完全是自己编写的css和js，其文件结构也比较清晰——这两个人的博客和源代码链接都可以在刚才说的页面上找到，请善用快捷键 &lt;b&gt;Ctrl+F&lt;/b&gt; 。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;行动纲领&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
按照以下步骤进行：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在Github上建立一个名为&amp;lt;username&amp;gt;.Github.io的repo，其中的username为Github用户名.
&lt;/li&gt;
&lt;li&gt;在本地建立对应的repo目录并设置好.
&lt;/li&gt;
&lt;li&gt;将下载下来的模板拷贝到本地repo目录中.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
前期的工作就是这么三步,当然这里说得比较简略，详细的步骤可以到&lt;a href=&quot;https://help.Github.com/categories/20/articles&quot;&gt;Github Pages的帮助页面&lt;/a&gt; 里进行了解。后面主要的工作集中在对自己的博客的配置中，下面将讲述博客配置的一些细节。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Jekyll博客配置&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
之前说Jekyll并不是必须的，但这里为什么要说“Jekyll博客配置”呢？因为虽然我们可以不用Jekyll，但最终Github pages生成我们的博客时就是用的Jekyll，所以我们在配置上还是得按照Jekyll的规矩来。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-1&quot;&gt;博客目录结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;p&gt;
首先明确一点，博客目录中不以下划线为命名开始的文件/文件夹都会在生成博客时复制过去，根据个人的不同喜好，博客的结构会不一样，这里只说一下Jekyll要求的一些结构：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;-- index.html         &amp;#32593;&amp;#31449;&amp;#39318;&amp;#39029;&amp;#25991;&amp;#20214;
-- _layouts           &amp;#21338;&amp;#23458;&amp;#27169;&amp;#26495;&amp;#30446;&amp;#24405;
   -- default.html
   --post.html
-- _posts             &amp;#25991;&amp;#31456;&amp;#23384;&amp;#25918;&amp;#30446;&amp;#24405;
   -- 2013-09-08-test.md
   -- 2013-09-08-test.html
   -- &amp;lt;other posts&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
除此以外其他文件都不是必须的，但光有这三个东西很难保证能生成一个足够完整的博客——事实上网站模板和文章目录也不是必须的，除了index.html，因为完全可以乱七八糟写一堆html文件然后自己在各个html文件之间理清关系。因此，通常的一个功能完整的Jekyll博客目录包含以下结构和文件：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;-- index.html         &amp;#32593;&amp;#31449;&amp;#39318;&amp;#39029;&amp;#25991;&amp;#20214;
-- archives.html      &amp;#25991;&amp;#31456;&amp;#23384;&amp;#26723;&amp;#39029;&amp;#38754;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#25991;&amp;#20214;&amp;#21517;&amp;#21487;&amp;#25913;
-- categories.html    &amp;#25991;&amp;#31456;&amp;#20998;&amp;#31867;&amp;#39029;&amp;#38754;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#25991;&amp;#20214;&amp;#21517;&amp;#21487;&amp;#25913;
-- tags.html          &amp;#25991;&amp;#31456;&amp;#26631;&amp;#31614;&amp;#39029;&amp;#38754;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#25991;&amp;#20214;&amp;#21517;&amp;#21487;&amp;#25913;
-- about.html         &amp;#8220;&amp;#20851;&amp;#20110;&amp;#25105;&amp;#8221;&amp;#39029;&amp;#38754;&amp;#25991;&amp;#20214;&amp;#65292;&amp;#25991;&amp;#20214;&amp;#21517;&amp;#21487;&amp;#25913;
-- rss.xml&amp;#25110;atom.xml  &amp;#21338;&amp;#23458;feed&amp;#25991;&amp;#20214;&amp;#65292;&amp;#25991;&amp;#20214;&amp;#21517;&amp;#21487;&amp;#25913;
-- sitemap.xml        &amp;#21338;&amp;#23458;&amp;#22320;&amp;#22270;&amp;#65292;&amp;#20026;&amp;#21338;&amp;#23458;&amp;#20570;SEO&amp;#20248;&amp;#21270;&amp;#65292;&amp;#36825;&amp;#20010;&amp;#25105;&amp;#19981;&amp;#22826;&amp;#25026;
-- _config.yml        Jekyll&amp;#21338;&amp;#23458;&amp;#37197;&amp;#32622;&amp;#25991;&amp;#20214;
-- _layouts           &amp;#21338;&amp;#23458;&amp;#27169;&amp;#26495;&amp;#30446;&amp;#24405;
   -- default.html
   -- post.html
-- _includes          &amp;#21487;&amp;#22797;&amp;#29992;&amp;#30340;&amp;#20844;&amp;#29992;&amp;#27169;&amp;#26495;&amp;#25991;&amp;#20214;&amp;#30446;&amp;#24405;&amp;#65292;&amp;#20363;&amp;#22914;&amp;#21338;&amp;#23458;&amp;#30340;&amp;#23548;&amp;#33322;&amp;#26465;&amp;#12290;&amp;#19981;&amp;#26159;&amp;#24517;&amp;#39035;&amp;#30340;&amp;#65292;
                      &amp;#20294;&amp;#20998;&amp;#31163;&amp;#20986;&amp;#21508;&amp;#20010;&amp;#39029;&amp;#38754;&amp;#30340;&amp;#20844;&amp;#26377;&amp;#37096;&amp;#20998;&amp;#21487;&amp;#20197;&amp;#20351;&amp;#24471;&amp;#27169;&amp;#26495;&amp;#26356;&amp;#26131;&amp;#35835;&amp;#65292;&amp;#32467;&amp;#26500;&amp;#26356;&amp;#28165;&amp;#26224;
   -- footer.html
   -- footer.html
   -- &amp;lt;other file to include&lt;span style=&quot;color: #cf4a44;&quot;&gt; in&lt;/span&gt; template&amp;gt;
-- _posts             &amp;#25991;&amp;#31456;&amp;#23384;&amp;#25918;&amp;#30446;&amp;#24405;
   -- 2013-09-08-test.md
   -- 2013-09-08-test.html
   -- &amp;lt;other posts&amp;gt;                         
-- assets/            &amp;#20854;&amp;#20182;&amp;#21338;&amp;#23458;&amp;#25991;&amp;#20214;&amp;#23384;&amp;#25918;&amp;#30446;&amp;#24405;&amp;#65292;&amp;#22914;css&amp;#65292;&amp;#22270;&amp;#29255;&amp;#65292;js&amp;#25991;&amp;#20214;&amp;#65292;&amp;#30446;&amp;#24405;&amp;#32467;&amp;#26500;&amp;#20165;&amp;#20026;
                      &amp;#31034;&amp;#20363;&amp;#65292;&amp;#21487;&amp;#26681;&amp;#25454;&amp;#20010;&amp;#20154;&amp;#24847;&amp;#24895;&amp;#33258;&amp;#34892;&amp;#35774;&amp;#32622;
   -- css
      -- style.css
   -- img
      -- favicon.ico
   -- js
      -- blog.js
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-2&quot;&gt;博客模板&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;p&gt;
正如上面的示例一样，博客模板一般包含一个default.html和一个post.html，正如其名字一样，default.html是博客的模板，而post.html一般是文章的生成模板。查看一些Jekyll博客的模板，您会发现其中会有
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;

{{ site.url }} 


{{ for post in site.posts }}

&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
这样的语句，这是因为Jekyll使用&lt;a href=&quot;https://Github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;liquid语法&lt;/a&gt; 来解析模板，诸如 &lt;b&gt;site.url&lt;/b&gt; 、 &lt;b&gt;site.posts&lt;/b&gt; 这样的部分是Jekyll内置的一些变量，关于Jekyll的变量的更多内容可以到&lt;a href=&quot;http://Jekyllrb.com/&quot;&gt;Jekyll的官网&lt;/a&gt; 上深入了解。
&lt;/p&gt;

&lt;p&gt;
有了模板文件后，其他的页面都可以通过Jekyll所谓的front-matter来使用模板，举例来说，撰写文章时，一般这样写：
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;#x2014;
layout     : post
title      : &amp;lt;文章标题&amp;gt;
categories : &amp;lt;分类&amp;gt;
tags       : &amp;lt;标签&amp;gt;
&amp;#x2014;
&amp;lt;正文&amp;gt;
&amp;#x2026;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
这样在编写文章时就只需要关心文章内容了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-3&quot;&gt;\_config.yml&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;p&gt;
\_config.yml文件是Jekyll博客的配置文件，用户可以在这个配置文件中设定博客名称、博客描述、作者名称等信息，并可以在模板中作为变量使用。
&lt;/p&gt;

&lt;p&gt;
我的配置文件如下所示：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;permalink:        /:year/:month/:day.html
markdown:         rdiscount
pygments:         true
paginate:         5

title:            &amp;#31548;&amp;#20013;&amp;#26790;
url:              http://linusp.Github.io/
feed:             /atom.xml
author:
    name:         &amp;#21457;&amp;#26465;&amp;#20820;&amp;#23376;
    email:        linusp1024@gmail.com
    description:  &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;&amp;#21464;&amp;#25104;&amp;#20820;&amp;#23376;&amp;#30340;&amp;#38738;&amp;#34521;&quot;&lt;/span&gt;

follow:
    email:        linusp1024@gmail.com
    Github:       https://Github.com/Linusp


description:      &amp;#21457;&amp;#26465;&amp;#20820;&amp;#23376;&amp;#30340;&amp;#19981;&amp;#23436;&amp;#20840;&amp;#25216;&amp;#26415;&amp;#21338;&amp;#23458;

indexContent:     true

style:            /assets/css/style.css
blogName:         &amp;#31548;&amp;#20013;&amp;#26790;
blogDesc:         &amp;#21457;&amp;#26465;&amp;#20820;&amp;#23376;&amp;#30340;&amp;#19981;&amp;#23436;&amp;#20840;&amp;#25216;&amp;#26415;&amp;#21338;&amp;#23458;
favicon:          /assets/img/favicon.ico
theme:            blue

disqus:           linuspb

copyright:        &amp;#169; 2013 
test:             ok
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-4&quot;&gt;archives页面示例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-4&quot;&gt;
&lt;p&gt;
一个简单的archives页面&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; name=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;如下
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;---
layout: default
title : Archives
---
&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;ul&lt;/span&gt;&amp;gt;
  {% for post in site.posts %}
  &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;title&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;{{ post.title }}&quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;date&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;day&quot;&lt;/span&gt;&amp;gt;{{ post.date | date: '&lt;span style=&quot;color: #fefc58;&quot;&gt;%d&lt;/span&gt;' }}&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;month&quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;abbr&lt;/span&gt;&amp;gt;{{ post.date | date: '&lt;span style=&quot;color: #fefc58;&quot;&gt;%b&lt;/span&gt;' }}&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;abbr&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;year&quot;&lt;/span&gt;&amp;gt;{{ post.date | date: '&lt;span style=&quot;color: #fefc58;&quot;&gt;%Y&lt;/span&gt;' }}&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt; &lt;span style=&quot;color: #fefc58;&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;title&quot;&lt;/span&gt;&amp;gt;{{ post.title }}&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;span&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;a&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;li&lt;/span&gt;&amp;gt;
  {% endfor %}
&amp;lt;/&lt;span style=&quot;color: #ed8a0c;&quot;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
同样的，categories页面和tags页面的形式差不多，也是使用Jekyll内置的变量，当然要做得好看还是要费点功夫的，比如说本人这个博客的这两个页面还是一团糟（因为博客主题的作者并没有提供这两个页面，这就是所谓 &lt;b&gt;自己动手丰衣足食&lt;/b&gt; 啦）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-5&quot;&gt;\_site目录&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-5&quot;&gt;
&lt;p&gt;
本地调试时，Jekyll会在目录下生成一个\_site目录，目录就是真正生成的博客目录和文件，但这个文件对Github Pages是无意义的，仅仅是用来方便本地预览和调试，因此建议在.gitignore文件中添加该目录以在push时不用上传该目录及其中的文件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;使用emacs的org-mode&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
对于emacser来说，使用org-mode来写作才是最幸福的事情，因此就有了这一部分。这一部分的绝大部分内容来自脚注2&lt;sup&gt;&lt;a id=&quot;fnr.2.100&quot; name=&quot;fnr.2.100&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;中提到的文章，基本的配置过程和要点在文章中都已经说得很详细了，因此我在这里就简略地说几点。
&lt;/p&gt;

&lt;p&gt;
因为Jekyll可以识别markdown文件和html文件，所以使用emacs的org-mode将org文件publish成html文件就是我们要做的。值得一提的是Jekyll-Bootstrap在本地调试时直接无视\_posts目录下后缀为html的文件，虽然说肯定有办法改变这种行为，但我找了一会没找到就放弃了，加之Jekyll-Bootstrap在Jekyll的基础上又多加了一些东西，所以导致我并没有去使用Jekyll-Bootstrap以及使用了Jekyll-Bootstrap的博客模板。
&lt;/p&gt;

&lt;p&gt;
我的方案：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;建立一个目录，在其中建立两个子目录，一个名为 &lt;b&gt;org&lt;/b&gt; ，一个名为 &lt;b&gt;Jekyll&lt;/b&gt; 。后者是和username.Github.io这个repo对应的本地repo目录，前者是org格式的文章存放目录，注意org目录下再建立一个 &lt;b&gt;\_posts&lt;/b&gt; 目录，将文章存放到 &lt;b&gt;org/\_posts&lt;/b&gt; 下面，这样在执行 &lt;b&gt;org-publish-project&lt;/b&gt; 时才能保证生成到指定目录。
&lt;/li&gt;

&lt;li&gt;使用org-mode 7.x。emacs23自带的org-mode版本为6.x，其中的bug会导致插入的front-matter在生成时发生错误。emacs24自带的org-mode工作良好。
&lt;/li&gt;

&lt;li&gt;org-mode的publish参数中一定要加上 &lt;b&gt;:body-only t&lt;/b&gt; 否则就会生成完整的html文件，这不是我们想要的。
&lt;/li&gt;

&lt;li&gt;编写文章时，在头部添加front matter，如下
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;example&quot;&gt;
#+BEGIN_HTML
---
layout     : post
title      : 使用Github Pages服务建立个人博客
categories : IT
tags       : Github emacs org-mode Jekyll
---
#+END_HTML
&lt;/pre&gt;
&lt;p&gt;
而不需要其他信息，并在之后编写正文。
&lt;/p&gt;

&lt;p&gt;
我的publish配置（仅供参考）
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #cf4a44;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;color: #bebebe;&quot;&gt;org-publish&lt;/span&gt;)
(setq org-publish-project-alist
      '(
    (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;org-linusp&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #e81122;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;Path to your org files.&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:base-directory&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/org/&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:base-extension&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;org&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #e81122;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;Path to your Jekyll project.&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:publishing-directory&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/Jekyll/&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:recursive&lt;/span&gt; t
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:publishing-function&lt;/span&gt; org-publish-org-to-html
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:headline-levels&lt;/span&gt; 4&lt;span style=&quot;color: #a07f41; background-color: #073642;&quot;&gt; &lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:html-extension&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;html&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:body-only&lt;/span&gt; t &lt;span style=&quot;color: #e81122;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #e81122;&quot;&gt;Only export section between &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
     )
    (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;org-static-linusp&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:base-directory&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/org/&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:base-extension&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;css&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;png&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;jpg&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;gif&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;pdf&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;mp3&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;ogg&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;swf&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #25ef29; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #25ef29;&quot;&gt;php&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:publishing-directory&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;~/blog/Jekyll/&quot;&lt;/span&gt;
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:recursive&lt;/span&gt; t
     &lt;span style=&quot;color: #31d3c4;&quot;&gt;:publishing-function&lt;/span&gt; org-publish-attachment
     )
    (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;blog-linusp&quot;&lt;/span&gt; &lt;span style=&quot;color: #31d3c4;&quot;&gt;:components&lt;/span&gt; (&lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;org-linusp&quot;&lt;/span&gt; &lt;span style=&quot;color: #25ef29;&quot;&gt;&quot;org-static-linusp&quot;&lt;/span&gt;))
    ))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
执行 &lt;b&gt;org-publish-project&lt;/b&gt; 时，选择 &lt;b&gt;blog-linusp&lt;/b&gt; 进行publish（按照我这个配置）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;尚存的问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
目前还存在以下问题：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;del&gt;在emacs中使用 &lt;b&gt;#+begin\_src&lt;/b&gt; 插入的代码块背景色太浅导致有些部分看不清.&lt;/del&gt; （解决办法：修改css文件中pre的背景色为深色）
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;在emacs中使用 &lt;b&gt;#+begin\_quote&lt;/b&gt; 插入的引用行间距很大而且有下划线，应该是博客主题 &lt;b&gt;The One&lt;/b&gt; 的css导致的.&lt;/del&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;在emacs中引用liquid语法的语句会被Jekyll解析而不能正确显示.&lt;/del&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;分类页面和标签页面还存在问题&lt;/del&gt; （如果您想使用本博客模板的话，建议使用&lt;i&gt;初始模板&lt;/i&gt;）.
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;首页显示了每篇文章的全部内容，应当改成显示文章概要以处理像本文这样内容较多的文章.&lt;/del&gt; 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
如果您看了这篇文章并发现本文未描述出的一些问题，或者觉得我有可以帮上忙的地方，都可以&lt;a href=&quot;mailto:linusp1024@gmail.com&quot;&gt;发邮件给我&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;关于本博客&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
&lt;del&gt;如果您够细心，应该会发现博客底端的脚注上的信息。在这里感谢&lt;a href=&quot;http://zhanxin.info&quot;&gt;PIZn&lt;/a&gt; ，本博客使用的就是他设计的主题 &lt;b&gt;The One&lt;/b&gt; ，当然本人在该主题的基础上做了一定的修改并还会继续进行修改。&lt;/del&gt; 此外还要感谢&lt;a href=&quot;http://tangjiujun.Github.io&quot;&gt;唐九军&lt;/a&gt; ，他的结构清晰、简洁的博客模板让我对Jekyll博客的基础有了足够的了解。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;&amp;#33050;&amp;#27880;: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
详情见维基百科的&lt;a href=&quot;http://zh.wikipedia.org/zh/Github&quot;&gt;Github条目&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; name=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
来自&lt;a href=&quot;http://orgmode.org/worg/org-tutorials/org-Jekyll.html&quot;&gt;Using org to Blog with Jekyll&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

    </content>
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link type="text/html" rel="alternate" href="http://linusp.github.io/2013/09/11/first-post.html"/>
    <id>http://linusp.github.io/2013/09/11/first-post</id>
    <published>2013-09-11T00:00:00-04:00</published>
    <updated>2013-09-11T00:00:00-04:00</updated>
    <content type="html">
      &lt;p&gt;
这是用Jekyll+Github搭建的博客上的第一篇文章，这里就不多说什么了，仅仅是用来做个纪念，用Jekyll搭建静态博客并和emacs的org-mode有机结合的具体细节将会在下一篇文章中讲解。
&lt;/p&gt;

    </content>
  </entry>
  
</feed>
